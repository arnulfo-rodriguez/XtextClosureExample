/*
* generated by Xtext
*/
package org.arz.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.arz.services.MiniScriptGrammarAccess;

public class MiniScriptParser extends AbstractContentAssistParser {
	
	@Inject
	private MiniScriptGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.arz.ui.contentassist.antlr.internal.InternalMiniScriptParser createParser() {
		org.arz.ui.contentassist.antlr.internal.InternalMiniScriptParser result = new org.arz.ui.contentassist.antlr.internal.InternalMiniScriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getBodyAccess().getAlternatives(), "rule__Body__Alternatives");
					put(grammarAccess.getFunctorAccess().getAlternatives(), "rule__Functor__Alternatives");
					put(grammarAccess.getExprTailAccess().getAlternatives(), "rule__ExprTail__Alternatives");
					put(grammarAccess.getFactorTailAccess().getAlternatives(), "rule__FactorTail__Alternatives");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getProgramTailAccess().getGroup(), "rule__ProgramTail__Group__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
					put(grammarAccess.getBodyAccess().getGroup_1(), "rule__Body__Group_1__0");
					put(grammarAccess.getBodyTailAccess().getGroup(), "rule__BodyTail__Group__0");
					put(grammarAccess.getFunctionParametersAccess().getGroup(), "rule__FunctionParameters__Group__0");
					put(grammarAccess.getFunctionParametersTailAccess().getGroup(), "rule__FunctionParametersTail__Group__0");
					put(grammarAccess.getApplyAccess().getGroup(), "rule__Apply__Group__0");
					put(grammarAccess.getApplyTailAccess().getGroup(), "rule__ApplyTail__Group__0");
					put(grammarAccess.getFunctionArgumentsAccess().getGroup(), "rule__FunctionArguments__Group__0");
					put(grammarAccess.getFunctionArgumentsTailAccess().getGroup(), "rule__FunctionArgumentsTail__Group__0");
					put(grammarAccess.getNumericExpressionAccess().getGroup(), "rule__NumericExpression__Group__0");
					put(grammarAccess.getExprTailAccess().getGroup_0(), "rule__ExprTail__Group_0__0");
					put(grammarAccess.getExprTailAccess().getGroup_1(), "rule__ExprTail__Group_1__0");
					put(grammarAccess.getFactorAccess().getGroup(), "rule__Factor__Group__0");
					put(grammarAccess.getFactorTailAccess().getGroup_0(), "rule__FactorTail__Group_0__0");
					put(grammarAccess.getFactorTailAccess().getGroup_1(), "rule__FactorTail__Group_1__0");
					put(grammarAccess.getVariableAssignmentAccess().getGroup(), "rule__VariableAssignment__Group__0");
					put(grammarAccess.getParenthesisExpressionAccess().getGroup(), "rule__ParenthesisExpression__Group__0");
					put(grammarAccess.getProgramAccess().getExpressionsAssignment_0(), "rule__Program__ExpressionsAssignment_0");
					put(grammarAccess.getProgramAccess().getTailAssignment_1(), "rule__Program__TailAssignment_1");
					put(grammarAccess.getProgramTailAccess().getExpressionAssignment_1(), "rule__ProgramTail__ExpressionAssignment_1");
					put(grammarAccess.getProgramTailAccess().getTailAssignment_2(), "rule__ProgramTail__TailAssignment_2");
					put(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_2(), "rule__FunctionDeclaration__ParametersAssignment_2");
					put(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_4(), "rule__FunctionDeclaration__BodyAssignment_4");
					put(grammarAccess.getBodyAccess().getExpressionAssignment_0(), "rule__Body__ExpressionAssignment_0");
					put(grammarAccess.getBodyAccess().getExpressionsAssignment_1_1(), "rule__Body__ExpressionsAssignment_1_1");
					put(grammarAccess.getBodyAccess().getTailAssignment_1_2(), "rule__Body__TailAssignment_1_2");
					put(grammarAccess.getBodyTailAccess().getExpressionAssignment_1(), "rule__BodyTail__ExpressionAssignment_1");
					put(grammarAccess.getBodyTailAccess().getTailAssignment_2(), "rule__BodyTail__TailAssignment_2");
					put(grammarAccess.getFunctionParametersAccess().getParameterAssignment_0(), "rule__FunctionParameters__ParameterAssignment_0");
					put(grammarAccess.getFunctionParametersAccess().getNextParametersAssignment_1(), "rule__FunctionParameters__NextParametersAssignment_1");
					put(grammarAccess.getFunctionParametersTailAccess().getParameterAssignment_1(), "rule__FunctionParametersTail__ParameterAssignment_1");
					put(grammarAccess.getFunctionParametersTailAccess().getNextParametersAssignment_2(), "rule__FunctionParametersTail__NextParametersAssignment_2");
					put(grammarAccess.getApplyAccess().getFunctorAssignment_0(), "rule__Apply__FunctorAssignment_0");
					put(grammarAccess.getApplyAccess().getArgumentsAssignment_1(), "rule__Apply__ArgumentsAssignment_1");
					put(grammarAccess.getApplyTailAccess().getArgsAssignment_2(), "rule__ApplyTail__ArgsAssignment_2");
					put(grammarAccess.getApplyTailAccess().getNextCallAssignment_4(), "rule__ApplyTail__NextCallAssignment_4");
					put(grammarAccess.getFunctionArgumentsAccess().getArgumentAssignment_0(), "rule__FunctionArguments__ArgumentAssignment_0");
					put(grammarAccess.getFunctionArgumentsAccess().getNextArgumentsAssignment_1(), "rule__FunctionArguments__NextArgumentsAssignment_1");
					put(grammarAccess.getFunctionArgumentsTailAccess().getArgumentAssignment_1(), "rule__FunctionArgumentsTail__ArgumentAssignment_1");
					put(grammarAccess.getFunctionArgumentsTailAccess().getNextArgumentsAssignment_2(), "rule__FunctionArgumentsTail__NextArgumentsAssignment_2");
					put(grammarAccess.getLiteralExprAccess().getValueAssignment(), "rule__LiteralExpr__ValueAssignment");
					put(grammarAccess.getSymbolReferenceAccess().getIdAssignment(), "rule__SymbolReference__IdAssignment");
					put(grammarAccess.getNumericExpressionAccess().getFactorAssignment_0(), "rule__NumericExpression__FactorAssignment_0");
					put(grammarAccess.getNumericExpressionAccess().getExprTailAssignment_1(), "rule__NumericExpression__ExprTailAssignment_1");
					put(grammarAccess.getExprTailAccess().getFactorAssignment_0_1(), "rule__ExprTail__FactorAssignment_0_1");
					put(grammarAccess.getExprTailAccess().getExprTailAssignment_0_2(), "rule__ExprTail__ExprTailAssignment_0_2");
					put(grammarAccess.getExprTailAccess().getFactorAssignment_1_1(), "rule__ExprTail__FactorAssignment_1_1");
					put(grammarAccess.getExprTailAccess().getExprTailAssignment_1_2(), "rule__ExprTail__ExprTailAssignment_1_2");
					put(grammarAccess.getFactorAccess().getTermAssignment_0(), "rule__Factor__TermAssignment_0");
					put(grammarAccess.getFactorAccess().getFactorTailAssignment_1(), "rule__Factor__FactorTailAssignment_1");
					put(grammarAccess.getFactorTailAccess().getTermAssignment_0_1(), "rule__FactorTail__TermAssignment_0_1");
					put(grammarAccess.getFactorTailAccess().getFactorTailAssignment_0_2(), "rule__FactorTail__FactorTailAssignment_0_2");
					put(grammarAccess.getFactorTailAccess().getTermAssignment_1_1(), "rule__FactorTail__TermAssignment_1_1");
					put(grammarAccess.getFactorTailAccess().getFactorTailAssignment_1_2(), "rule__FactorTail__FactorTailAssignment_1_2");
					put(grammarAccess.getVariableAssignmentAccess().getIdAssignment_0(), "rule__VariableAssignment__IdAssignment_0");
					put(grammarAccess.getVariableAssignmentAccess().getExpressionAssignment_2(), "rule__VariableAssignment__ExpressionAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.arz.ui.contentassist.antlr.internal.InternalMiniScriptParser typedParser = (org.arz.ui.contentassist.antlr.internal.InternalMiniScriptParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MiniScriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MiniScriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

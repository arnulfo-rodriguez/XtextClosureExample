grammar org.arz.MiniScript with org.eclipse.xtext.common.Terminals

generate miniScript "http://www.arz.org/MiniScript"

Model:
	Program;

Program:
	expressions+=Expression ';' (expression+=Expression ';')*
;
	
Expression:
	VariableAssignment |
	FunctionDeclaration |
	ApplyFunction |
	LiteralExpr |
	NumericExpression |
	BlockExpression |
	SymbolReference;

ApplyFunction:
	functor=SymbolReference app3=ApplyFunctionAlpha |
	functor=BlockExpression app3=ApplyFunctionAlpha
;

ApplyFunctionAlpha:
	 '(' arguments=FunctionArguments ')' nextCall=ApplyFunctionAlpha?
;



FunctionArguments:
	{FunctionArguments}parameters+=Expression? |
	{FunctionArguments}parameters+=Expression (',' parameters+=Expression)+
;



BlockExpression:
	'{' expressions+=Expression ';' (expression+=Expression ';')* '}'
;


FunctionDeclaration:
	'func' '(' parameters=FunctionParameters ')' body=Expression 
;

FunctionParameters:
	{FunctionParameters}parameters+=ID? |
	parameters+=ID (',' parameters+=ID)+
	;



LiteralExpr:
	value=Num
;


SymbolReference:
	id=ID
;


VariableAssignment:
	symbol=SymbolReference '=' expression=Expression
;


NumericExpression:
	factor=Factor exprTail=ExprTail?
;


ExprTail:
	'+' factor=Factor exprTail=ExprTail? |
	'-' factor=Factor exprTail=ExprTail? 
;


Factor: term=Term factorTail=FactorTail?;

FactorTail:
	'*' term=Term factorTail=FactorTail? |
	'/' term=Term factorTail=FactorTail? ;


Term:
	term=LiteralExpr |
	term=BlockExpression |
	term=SymbolReference |
	term=ApplyFunction |
	'(' term=Expression ')' 
;

terminal Num: '0'..'9'	
;

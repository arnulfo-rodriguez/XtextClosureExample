grammar org.arz.MiniScript with org.eclipse.xtext.common.Terminals

generate miniScript "http://www.arz.org/miniScript"



Model:
	Program;


Program:
	expressions+=Expression ';' (expressions+=Expression ';')*
;

enum AdditionOperator : add='+' | subtract='-' ;
enum FactorOperator:  mult='*' | division='/';
enum ComparisonOperator: gt='>' | gte='>=' | lt='<' | lte='<=' | eq='==';
enum BinaryLogicalOperator: and='and' | or='or';
enum UnaryLogicalOperator: not='not';


Expression:
 	FunctionDeclaration  | 
    VariableAssignment |
	LogicalBinaryExpression |
	LogicalUnaryExpression
;

LogicalBinaryExpression returns Expression:
	ComparisonExpression ({LogicalBinaryExpression.leftExpr=current} operator=BinaryLogicalOperator rightExpr=ComparisonExpression)*
;

LogicalUnaryExpression:
	operator=UnaryLogicalOperator expression=ComparisonExpression
;

ComparisonExpression returns Expression:
	NumericExpression ({ComparisonExpression.leftExpr=current} operator=ComparisonOperator rightExpr=NumericExpression)?
;


FunctionDeclaration:
	'func' '(' (parameters+=ID (',' parameters+=ID)*)? ')' body=Body
;

Body :
 	expressions+=Expression |
    {Body}'{' ( expressions+=Expression ';')* '}'
;


SymbolReference :
	id=ID
;


NumericExpression returns Expression:
	Factor ({NumericExpression.leftFactor=current} operator=AdditionOperator rightFactor=Factor)*
;

Factor returns Expression: 
	Term ({Factor.leftTerm=current} operator=FactorOperator rightTerm=Term)*
;

Term returns Expression:
 	LiteralExpr | Apply ;

Apply returns Expression:
	Functor ({Apply.functor=current} '(' (arguments+=Expression (',' arguments+=Expression)*)? ')')*
;

Functor returns Expression:
	SymbolReference |
	ParenthesisExpression
;


LiteralExpr :
	value=INT
;

VariableAssignment :
	id=ID '=' expression=Expression
;

ParenthesisExpression returns Expression:
	'(' Expression ')'
;



/*
* generated by Xtext
*/

package org.arz.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MiniScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final RuleCall cProgramParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	Program;
		public ParserRule getRule() { return rule; }

		//Program
		public RuleCall getProgramParserRuleCall() { return cProgramParserRuleCall; }
	}

	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Program:
		//	expressions+=Expression ";" (expression+=Expression ";")*;
		public ParserRule getRule() { return rule; }

		//expressions+=Expression ";" (expression+=Expression ";")*
		public Group getGroup() { return cGroup; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }

		//(expression+=Expression ";")*
		public Group getGroup_2() { return cGroup_2; }

		//expression+=Expression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_0() { return cExpressionExpressionParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	FunctionDeclaration | / *VariableAssignment |* / NumericExpression;
		public ParserRule getRule() { return rule; }

		//FunctionDeclaration | / *VariableAssignment |* / NumericExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_0() { return cFunctionDeclarationParserRuleCall_0; }

		/// *VariableAssignment |* / NumericExpression
		public RuleCall getNumericExpressionParserRuleCall_1() { return cNumericExpressionParserRuleCall_1; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersFunctionParametersParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//FunctionDeclaration:
		//	"func" "(" parameters=FunctionParameters ")" body=Body;
		public ParserRule getRule() { return rule; }

		//"func" "(" parameters=FunctionParameters ")" body=Body
		public Group getGroup() { return cGroup; }

		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameters=FunctionParameters
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//FunctionParameters
		public RuleCall getParametersFunctionParametersParserRuleCall_2_0() { return cParametersFunctionParametersParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=Body
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Body
		public RuleCall getBodyBodyParserRuleCall_4_0() { return cBodyBodyParserRuleCall_4_0; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBodyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Body:
		//	expressions+=Expression | {Body} "{" expressions+=Expression* "}";
		public ParserRule getRule() { return rule; }

		//expressions+=Expression | {Body} "{" expressions+=Expression* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }

		//{Body} "{" expressions+=Expression* "}"
		public Group getGroup_1() { return cGroup_1; }

		//{Body}
		public Action getBodyAction_1_0() { return cBodyAction_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//expressions+=Expression*
		public Assignment getExpressionsAssignment_1_2() { return cExpressionsAssignment_1_2; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_2_0() { return cExpressionsExpressionParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class FunctionParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameters");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFunctionParametersAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cParametersAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_0_1_0 = (RuleCall)cParametersAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cParametersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParametersIDTerminalRuleCall_1_0_0 = (RuleCall)cParametersAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		
		//FunctionParameters:
		//	{FunctionParameters} parameters+=ID? | parameters+=ID ("," parameters+=ID)+;
		public ParserRule getRule() { return rule; }

		//{FunctionParameters} parameters+=ID? | parameters+=ID ("," parameters+=ID)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//{FunctionParameters} parameters+=ID?
		public Group getGroup_0() { return cGroup_0; }

		//{FunctionParameters}
		public Action getFunctionParametersAction_0_0() { return cFunctionParametersAction_0_0; }

		//parameters+=ID?
		public Assignment getParametersAssignment_0_1() { return cParametersAssignment_0_1; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_0_1_0() { return cParametersIDTerminalRuleCall_0_1_0; }

		//parameters+=ID ("," parameters+=ID)+
		public Group getGroup_1() { return cGroup_1; }

		//parameters+=ID
		public Assignment getParametersAssignment_1_0() { return cParametersAssignment_1_0; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_1_0_0() { return cParametersIDTerminalRuleCall_1_0_0; }

		//("," parameters+=ID)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//parameters+=ID
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_1_1_1_0() { return cParametersIDTerminalRuleCall_1_1_1_0; }
	}

	public class ApplyFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ApplyFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctorSymbolReferenceParserRuleCall_0_0 = (RuleCall)cFunctorAssignment_0.eContents().get(0);
		private final Assignment cApp3Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cApp3ApplyFunctionAlphaParserRuleCall_1_0 = (RuleCall)cApp3Assignment_1.eContents().get(0);
		
		//ApplyFunction:
		//	functor=SymbolReference app3=ApplyFunctionAlpha;
		public ParserRule getRule() { return rule; }

		//functor=SymbolReference app3=ApplyFunctionAlpha
		public Group getGroup() { return cGroup; }

		//functor=SymbolReference
		public Assignment getFunctorAssignment_0() { return cFunctorAssignment_0; }

		//SymbolReference
		public RuleCall getFunctorSymbolReferenceParserRuleCall_0_0() { return cFunctorSymbolReferenceParserRuleCall_0_0; }

		//app3=ApplyFunctionAlpha
		public Assignment getApp3Assignment_1() { return cApp3Assignment_1; }

		//ApplyFunctionAlpha
		public RuleCall getApp3ApplyFunctionAlphaParserRuleCall_1_0() { return cApp3ApplyFunctionAlphaParserRuleCall_1_0; }
	}

	public class ApplyFunctionAlphaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ApplyFunctionAlpha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplyFunctionAlphaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsFunctionArgumentsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNextCallAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNextCallApplyFunctionAlphaParserRuleCall_4_0 = (RuleCall)cNextCallAssignment_4.eContents().get(0);
		
		//ApplyFunctionAlpha:
		//	{ApplyFunctionAlpha} "(" args=FunctionArguments? ")" nextCall=ApplyFunctionAlpha?;
		public ParserRule getRule() { return rule; }

		//{ApplyFunctionAlpha} "(" args=FunctionArguments? ")" nextCall=ApplyFunctionAlpha?
		public Group getGroup() { return cGroup; }

		//{ApplyFunctionAlpha}
		public Action getApplyFunctionAlphaAction_0() { return cApplyFunctionAlphaAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//args=FunctionArguments?
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//FunctionArguments
		public RuleCall getArgsFunctionArgumentsParserRuleCall_2_0() { return cArgsFunctionArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//nextCall=ApplyFunctionAlpha?
		public Assignment getNextCallAssignment_4() { return cNextCallAssignment_4; }

		//ApplyFunctionAlpha
		public RuleCall getNextCallApplyFunctionAlphaParserRuleCall_4_0() { return cNextCallApplyFunctionAlphaParserRuleCall_4_0; }
	}

	public class FunctionArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		
		//FunctionArguments:
		//	arguments+=Expression ("," arguments+=Expression)*;
		public ParserRule getRule() { return rule; }

		//arguments+=Expression ("," arguments+=Expression)*
		public Group getGroup() { return cGroup; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_0_0() { return cArgumentsExpressionParserRuleCall_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_1_0() { return cArgumentsExpressionParserRuleCall_1_1_0; }
	}

	public class LiteralExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralExpr");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNumTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralExpr:
		//	value=Num;
		public ParserRule getRule() { return rule; }

		//value=Num
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Num
		public RuleCall getValueNumTerminalRuleCall_0() { return cValueNumTerminalRuleCall_0; }
	}

	public class SymbolReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolReference");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//SymbolReference:
		//	id=ID;
		public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class VariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSymbolSymbolReferenceParserRuleCall_0_0 = (RuleCall)cSymbolAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//VariableAssignment:
		//	symbol=SymbolReference "=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//symbol=SymbolReference "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//symbol=SymbolReference
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }

		//SymbolReference
		public RuleCall getSymbolSymbolReferenceParserRuleCall_0_0() { return cSymbolSymbolReferenceParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class NumericExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFactorFactorParserRuleCall_0_0 = (RuleCall)cFactorAssignment_0.eContents().get(0);
		private final Assignment cExprTailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprTailExprTailParserRuleCall_1_0 = (RuleCall)cExprTailAssignment_1.eContents().get(0);
		
		//NumericExpression:
		//	factor=Factor exprTail=ExprTail?;
		public ParserRule getRule() { return rule; }

		//factor=Factor exprTail=ExprTail?
		public Group getGroup() { return cGroup; }

		//factor=Factor
		public Assignment getFactorAssignment_0() { return cFactorAssignment_0; }

		//Factor
		public RuleCall getFactorFactorParserRuleCall_0_0() { return cFactorFactorParserRuleCall_0_0; }

		//exprTail=ExprTail?
		public Assignment getExprTailAssignment_1() { return cExprTailAssignment_1; }

		//ExprTail
		public RuleCall getExprTailExprTailParserRuleCall_1_0() { return cExprTailExprTailParserRuleCall_1_0; }
	}

	public class ExprTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprTail");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFactorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFactorFactorParserRuleCall_0_1_0 = (RuleCall)cFactorAssignment_0_1.eContents().get(0);
		private final Assignment cExprTailAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprTailExprTailParserRuleCall_0_2_0 = (RuleCall)cExprTailAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFactorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFactorFactorParserRuleCall_1_1_0 = (RuleCall)cFactorAssignment_1_1.eContents().get(0);
		private final Assignment cExprTailAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprTailExprTailParserRuleCall_1_2_0 = (RuleCall)cExprTailAssignment_1_2.eContents().get(0);
		
		//ExprTail:
		//	"+" factor=Factor exprTail=ExprTail? | "-" factor=Factor exprTail=ExprTail?;
		public ParserRule getRule() { return rule; }

		//"+" factor=Factor exprTail=ExprTail? | "-" factor=Factor exprTail=ExprTail?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+" factor=Factor exprTail=ExprTail?
		public Group getGroup_0() { return cGroup_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//factor=Factor
		public Assignment getFactorAssignment_0_1() { return cFactorAssignment_0_1; }

		//Factor
		public RuleCall getFactorFactorParserRuleCall_0_1_0() { return cFactorFactorParserRuleCall_0_1_0; }

		//exprTail=ExprTail?
		public Assignment getExprTailAssignment_0_2() { return cExprTailAssignment_0_2; }

		//ExprTail
		public RuleCall getExprTailExprTailParserRuleCall_0_2_0() { return cExprTailExprTailParserRuleCall_0_2_0; }

		//"-" factor=Factor exprTail=ExprTail?
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//factor=Factor
		public Assignment getFactorAssignment_1_1() { return cFactorAssignment_1_1; }

		//Factor
		public RuleCall getFactorFactorParserRuleCall_1_1_0() { return cFactorFactorParserRuleCall_1_1_0; }

		//exprTail=ExprTail?
		public Assignment getExprTailAssignment_1_2() { return cExprTailAssignment_1_2; }

		//ExprTail
		public RuleCall getExprTailExprTailParserRuleCall_1_2_0() { return cExprTailExprTailParserRuleCall_1_2_0; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermTermParserRuleCall_0_0 = (RuleCall)cTermAssignment_0.eContents().get(0);
		private final Assignment cFactorTailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFactorTailFactorTailParserRuleCall_1_0 = (RuleCall)cFactorTailAssignment_1.eContents().get(0);
		
		//Factor:
		//	term=Term factorTail=FactorTail?;
		public ParserRule getRule() { return rule; }

		//term=Term factorTail=FactorTail?
		public Group getGroup() { return cGroup; }

		//term=Term
		public Assignment getTermAssignment_0() { return cTermAssignment_0; }

		//Term
		public RuleCall getTermTermParserRuleCall_0_0() { return cTermTermParserRuleCall_0_0; }

		//factorTail=FactorTail?
		public Assignment getFactorTailAssignment_1() { return cFactorTailAssignment_1; }

		//FactorTail
		public RuleCall getFactorTailFactorTailParserRuleCall_1_0() { return cFactorTailFactorTailParserRuleCall_1_0; }
	}

	public class FactorTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FactorTail");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTermAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_0_1_0 = (RuleCall)cTermAssignment_0_1.eContents().get(0);
		private final Assignment cFactorTailAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFactorTailFactorTailParserRuleCall_0_2_0 = (RuleCall)cFactorTailAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTermAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_1_0 = (RuleCall)cTermAssignment_1_1.eContents().get(0);
		private final Assignment cFactorTailAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFactorTailFactorTailParserRuleCall_1_2_0 = (RuleCall)cFactorTailAssignment_1_2.eContents().get(0);
		
		//FactorTail:
		//	"*" term=Term factorTail=FactorTail? | "/" term=Term factorTail=FactorTail?;
		public ParserRule getRule() { return rule; }

		//"*" term=Term factorTail=FactorTail? | "/" term=Term factorTail=FactorTail?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*" term=Term factorTail=FactorTail?
		public Group getGroup_0() { return cGroup_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_0() { return cAsteriskKeyword_0_0; }

		//term=Term
		public Assignment getTermAssignment_0_1() { return cTermAssignment_0_1; }

		//Term
		public RuleCall getTermTermParserRuleCall_0_1_0() { return cTermTermParserRuleCall_0_1_0; }

		//factorTail=FactorTail?
		public Assignment getFactorTailAssignment_0_2() { return cFactorTailAssignment_0_2; }

		//FactorTail
		public RuleCall getFactorTailFactorTailParserRuleCall_0_2_0() { return cFactorTailFactorTailParserRuleCall_0_2_0; }

		//"/" term=Term factorTail=FactorTail?
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//term=Term
		public Assignment getTermAssignment_1_1() { return cTermAssignment_1_1; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_1_0() { return cTermTermParserRuleCall_1_1_0; }

		//factorTail=FactorTail?
		public Assignment getFactorTailAssignment_1_2() { return cFactorTailAssignment_1_2; }

		//FactorTail
		public RuleCall getFactorTailFactorTailParserRuleCall_1_2_0() { return cFactorTailFactorTailParserRuleCall_1_2_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cApplyFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParenthesisExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Term:
		//	LiteralExpr | / *SymbolReference | * / ApplyFunction | ParenthesisExpression;
		public ParserRule getRule() { return rule; }

		//LiteralExpr | / *SymbolReference | * / ApplyFunction | ParenthesisExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralExpr
		public RuleCall getLiteralExprParserRuleCall_0() { return cLiteralExprParserRuleCall_0; }

		/// *SymbolReference | * / ApplyFunction
		public RuleCall getApplyFunctionParserRuleCall_1() { return cApplyFunctionParserRuleCall_1; }

		//ParenthesisExpression
		public RuleCall getParenthesisExpressionParserRuleCall_2() { return cParenthesisExpressionParserRuleCall_2; }
	}

	public class ParenthesisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesisExpression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	private ModelElements pModel;
	private ProgramElements pProgram;
	private ExpressionElements pExpression;
	private FunctionDeclarationElements pFunctionDeclaration;
	private BodyElements pBody;
	private FunctionParametersElements pFunctionParameters;
	private ApplyFunctionElements pApplyFunction;
	private ApplyFunctionAlphaElements pApplyFunctionAlpha;
	private FunctionArgumentsElements pFunctionArguments;
	private LiteralExprElements pLiteralExpr;
	private SymbolReferenceElements pSymbolReference;
	private VariableAssignmentElements pVariableAssignment;
	private NumericExpressionElements pNumericExpression;
	private ExprTailElements pExprTail;
	private FactorElements pFactor;
	private FactorTailElements pFactorTail;
	private TermElements pTerm;
	private ParenthesisExpressionElements pParenthesisExpression;
	private TerminalRule tNum;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniScriptGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Program;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Program:
	//	expressions+=Expression ";" (expression+=Expression ";")*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Expression:
	//	FunctionDeclaration | / *VariableAssignment |* / NumericExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//FunctionDeclaration:
	//	"func" "(" parameters=FunctionParameters ")" body=Body;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return (pFunctionDeclaration != null) ? pFunctionDeclaration : (pFunctionDeclaration = new FunctionDeclarationElements());
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//Body:
	//	expressions+=Expression | {Body} "{" expressions+=Expression* "}";
	public BodyElements getBodyAccess() {
		return (pBody != null) ? pBody : (pBody = new BodyElements());
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//FunctionParameters:
	//	{FunctionParameters} parameters+=ID? | parameters+=ID ("," parameters+=ID)+;
	public FunctionParametersElements getFunctionParametersAccess() {
		return (pFunctionParameters != null) ? pFunctionParameters : (pFunctionParameters = new FunctionParametersElements());
	}
	
	public ParserRule getFunctionParametersRule() {
		return getFunctionParametersAccess().getRule();
	}

	//ApplyFunction:
	//	functor=SymbolReference app3=ApplyFunctionAlpha;
	public ApplyFunctionElements getApplyFunctionAccess() {
		return (pApplyFunction != null) ? pApplyFunction : (pApplyFunction = new ApplyFunctionElements());
	}
	
	public ParserRule getApplyFunctionRule() {
		return getApplyFunctionAccess().getRule();
	}

	//ApplyFunctionAlpha:
	//	{ApplyFunctionAlpha} "(" args=FunctionArguments? ")" nextCall=ApplyFunctionAlpha?;
	public ApplyFunctionAlphaElements getApplyFunctionAlphaAccess() {
		return (pApplyFunctionAlpha != null) ? pApplyFunctionAlpha : (pApplyFunctionAlpha = new ApplyFunctionAlphaElements());
	}
	
	public ParserRule getApplyFunctionAlphaRule() {
		return getApplyFunctionAlphaAccess().getRule();
	}

	//FunctionArguments:
	//	arguments+=Expression ("," arguments+=Expression)*;
	public FunctionArgumentsElements getFunctionArgumentsAccess() {
		return (pFunctionArguments != null) ? pFunctionArguments : (pFunctionArguments = new FunctionArgumentsElements());
	}
	
	public ParserRule getFunctionArgumentsRule() {
		return getFunctionArgumentsAccess().getRule();
	}

	//LiteralExpr:
	//	value=Num;
	public LiteralExprElements getLiteralExprAccess() {
		return (pLiteralExpr != null) ? pLiteralExpr : (pLiteralExpr = new LiteralExprElements());
	}
	
	public ParserRule getLiteralExprRule() {
		return getLiteralExprAccess().getRule();
	}

	//SymbolReference:
	//	id=ID;
	public SymbolReferenceElements getSymbolReferenceAccess() {
		return (pSymbolReference != null) ? pSymbolReference : (pSymbolReference = new SymbolReferenceElements());
	}
	
	public ParserRule getSymbolReferenceRule() {
		return getSymbolReferenceAccess().getRule();
	}

	//VariableAssignment:
	//	symbol=SymbolReference "=" expression=Expression;
	public VariableAssignmentElements getVariableAssignmentAccess() {
		return (pVariableAssignment != null) ? pVariableAssignment : (pVariableAssignment = new VariableAssignmentElements());
	}
	
	public ParserRule getVariableAssignmentRule() {
		return getVariableAssignmentAccess().getRule();
	}

	//NumericExpression:
	//	factor=Factor exprTail=ExprTail?;
	public NumericExpressionElements getNumericExpressionAccess() {
		return (pNumericExpression != null) ? pNumericExpression : (pNumericExpression = new NumericExpressionElements());
	}
	
	public ParserRule getNumericExpressionRule() {
		return getNumericExpressionAccess().getRule();
	}

	//ExprTail:
	//	"+" factor=Factor exprTail=ExprTail? | "-" factor=Factor exprTail=ExprTail?;
	public ExprTailElements getExprTailAccess() {
		return (pExprTail != null) ? pExprTail : (pExprTail = new ExprTailElements());
	}
	
	public ParserRule getExprTailRule() {
		return getExprTailAccess().getRule();
	}

	//Factor:
	//	term=Term factorTail=FactorTail?;
	public FactorElements getFactorAccess() {
		return (pFactor != null) ? pFactor : (pFactor = new FactorElements());
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//FactorTail:
	//	"*" term=Term factorTail=FactorTail? | "/" term=Term factorTail=FactorTail?;
	public FactorTailElements getFactorTailAccess() {
		return (pFactorTail != null) ? pFactorTail : (pFactorTail = new FactorTailElements());
	}
	
	public ParserRule getFactorTailRule() {
		return getFactorTailAccess().getRule();
	}

	//Term:
	//	LiteralExpr | / *SymbolReference | * / ApplyFunction | ParenthesisExpression;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//ParenthesisExpression:
	//	"(" Expression ")";
	public ParenthesisExpressionElements getParenthesisExpressionAccess() {
		return (pParenthesisExpression != null) ? pParenthesisExpression : (pParenthesisExpression = new ParenthesisExpressionElements());
	}
	
	public ParserRule getParenthesisExpressionRule() {
		return getParenthesisExpressionAccess().getRule();
	}

	//terminal Num:
	//	"0".."9";
	public TerminalRule getNumRule() {
		return (tNum != null) ? tNum : (tNum = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Num"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

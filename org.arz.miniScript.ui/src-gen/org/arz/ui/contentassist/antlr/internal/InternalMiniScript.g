/*
* generated by Xtext
*/
grammar InternalMiniScript;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.arz.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.arz.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.arz.services.MiniScriptGrammarAccess;

}

@parser::members {
 
 	private MiniScriptGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MiniScriptGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getProgramParserRuleCall()); }
	ruleProgram
{ after(grammarAccess.getModelAccess().getProgramParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLetExpression
entryRuleLetExpression 
:
{ before(grammarAccess.getLetExpressionRule()); }
	 ruleLetExpression
{ after(grammarAccess.getLetExpressionRule()); } 
	 EOF 
;

// Rule LetExpression
ruleLetExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLetExpressionAccess().getGroup()); }
(rule__LetExpression__Group__0)
{ after(grammarAccess.getLetExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTernaryExpression
entryRuleTernaryExpression 
:
{ before(grammarAccess.getTernaryExpressionRule()); }
	 ruleTernaryExpression
{ after(grammarAccess.getTernaryExpressionRule()); } 
	 EOF 
;

// Rule TernaryExpression
ruleTernaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTernaryExpressionAccess().getGroup()); }
(rule__TernaryExpression__Group__0)
{ after(grammarAccess.getTernaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalBinaryExpression
entryRuleLogicalBinaryExpression 
:
{ before(grammarAccess.getLogicalBinaryExpressionRule()); }
	 ruleLogicalBinaryExpression
{ after(grammarAccess.getLogicalBinaryExpressionRule()); } 
	 EOF 
;

// Rule LogicalBinaryExpression
ruleLogicalBinaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalBinaryExpressionAccess().getGroup()); }
(rule__LogicalBinaryExpression__Group__0)
{ after(grammarAccess.getLogicalBinaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalUnaryExpression
entryRuleLogicalUnaryExpression 
:
{ before(grammarAccess.getLogicalUnaryExpressionRule()); }
	 ruleLogicalUnaryExpression
{ after(grammarAccess.getLogicalUnaryExpressionRule()); } 
	 EOF 
;

// Rule LogicalUnaryExpression
ruleLogicalUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalUnaryExpressionAccess().getGroup()); }
(rule__LogicalUnaryExpression__Group__0)
{ after(grammarAccess.getLogicalUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression 
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
(rule__ComparisonExpression__Group__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBody
entryRuleBody 
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule Body
ruleBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBodyAccess().getAlternatives()); }
(rule__Body__Alternatives)
{ after(grammarAccess.getBodyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSymbolReference
entryRuleSymbolReference 
:
{ before(grammarAccess.getSymbolReferenceRule()); }
	 ruleSymbolReference
{ after(grammarAccess.getSymbolReferenceRule()); } 
	 EOF 
;

// Rule SymbolReference
ruleSymbolReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSymbolReferenceAccess().getIdAssignment()); }
(rule__SymbolReference__IdAssignment)
{ after(grammarAccess.getSymbolReferenceAccess().getIdAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericExpression
entryRuleNumericExpression 
:
{ before(grammarAccess.getNumericExpressionRule()); }
	 ruleNumericExpression
{ after(grammarAccess.getNumericExpressionRule()); } 
	 EOF 
;

// Rule NumericExpression
ruleNumericExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericExpressionAccess().getGroup()); }
(rule__NumericExpression__Group__0)
{ after(grammarAccess.getNumericExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFactor
entryRuleFactor 
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFactorAccess().getGroup()); }
(rule__Factor__Group__0)
{ after(grammarAccess.getFactorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getAlternatives()); }
(rule__Term__Alternatives)
{ after(grammarAccess.getTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleApply
entryRuleApply 
:
{ before(grammarAccess.getApplyRule()); }
	 ruleApply
{ after(grammarAccess.getApplyRule()); } 
	 EOF 
;

// Rule Apply
ruleApply
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getApplyAccess().getGroup()); }
(rule__Apply__Group__0)
{ after(grammarAccess.getApplyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctor
entryRuleFunctor 
:
{ before(grammarAccess.getFunctorRule()); }
	 ruleFunctor
{ after(grammarAccess.getFunctorRule()); } 
	 EOF 
;

// Rule Functor
ruleFunctor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctorAccess().getAlternatives()); }
(rule__Functor__Alternatives)
{ after(grammarAccess.getFunctorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression 
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
(rule__LiteralExpression__Alternatives)
{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralBoolean
entryRuleLiteralBoolean 
:
{ before(grammarAccess.getLiteralBooleanRule()); }
	 ruleLiteralBoolean
{ after(grammarAccess.getLiteralBooleanRule()); } 
	 EOF 
;

// Rule LiteralBoolean
ruleLiteralBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralBooleanAccess().getValueAssignment()); }
(rule__LiteralBoolean__ValueAssignment)
{ after(grammarAccess.getLiteralBooleanAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralNumber
entryRuleLiteralNumber 
:
{ before(grammarAccess.getLiteralNumberRule()); }
	 ruleLiteralNumber
{ after(grammarAccess.getLiteralNumberRule()); } 
	 EOF 
;

// Rule LiteralNumber
ruleLiteralNumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralNumberAccess().getValueAssignment()); }
(rule__LiteralNumber__ValueAssignment)
{ after(grammarAccess.getLiteralNumberAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableAssignment
entryRuleVariableAssignment 
:
{ before(grammarAccess.getVariableAssignmentRule()); }
	 ruleVariableAssignment
{ after(grammarAccess.getVariableAssignmentRule()); } 
	 EOF 
;

// Rule VariableAssignment
ruleVariableAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAssignmentAccess().getGroup()); }
(rule__VariableAssignment__Group__0)
{ after(grammarAccess.getVariableAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesisExpression
entryRuleParenthesisExpression 
:
{ before(grammarAccess.getParenthesisExpressionRule()); }
	 ruleParenthesisExpression
{ after(grammarAccess.getParenthesisExpressionRule()); } 
	 EOF 
;

// Rule ParenthesisExpression
ruleParenthesisExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesisExpressionAccess().getGroup()); }
(rule__ParenthesisExpression__Group__0)
{ after(grammarAccess.getParenthesisExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule AdditionOperator
ruleAdditionOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionOperatorAccess().getAlternatives()); }
(rule__AdditionOperator__Alternatives)
{ after(grammarAccess.getAdditionOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule FactorOperator
ruleFactorOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorOperatorAccess().getAlternatives()); }
(rule__FactorOperator__Alternatives)
{ after(grammarAccess.getFactorOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ComparisonOperator
ruleComparisonOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
(rule__ComparisonOperator__Alternatives)
{ after(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryLogicalOperator
ruleUnaryLogicalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryLogicalOperatorAccess().getNotEnumLiteralDeclaration()); }
(	'not' 
)
{ after(grammarAccess.getUnaryLogicalOperatorAccess().getNotEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BinaryLogicalOperator
ruleBinaryLogicalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicalOperatorAccess().getAlternatives()); }
(rule__BinaryLogicalOperator__Alternatives)
{ after(grammarAccess.getBinaryLogicalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule TernaryOperator
ruleTernaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperatorAccess().getIfExpressionEnumLiteralDeclaration()); }
(	'if' 
)
{ after(grammarAccess.getTernaryOperatorAccess().getIfExpressionEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getAlternatives()); }
(rule__BooleanValue__Alternatives)
{ after(grammarAccess.getBooleanValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getFunctionDeclarationParserRuleCall_0()); }
	ruleFunctionDeclaration
{ after(grammarAccess.getExpressionAccess().getFunctionDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getVariableAssignmentParserRuleCall_1()); }
	ruleVariableAssignment
{ after(grammarAccess.getExpressionAccess().getVariableAssignmentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getLogicalBinaryExpressionParserRuleCall_2()); }
	ruleLogicalBinaryExpression
{ after(grammarAccess.getExpressionAccess().getLogicalBinaryExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getLogicalUnaryExpressionParserRuleCall_3()); }
	ruleLogicalUnaryExpression
{ after(grammarAccess.getExpressionAccess().getLogicalUnaryExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getTernaryExpressionParserRuleCall_4()); }
	ruleTernaryExpression
{ after(grammarAccess.getExpressionAccess().getTernaryExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getComparisonExpressionParserRuleCall_5()); }
	ruleComparisonExpression
{ after(grammarAccess.getExpressionAccess().getComparisonExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getLetExpressionParserRuleCall_6()); }
	ruleLetExpression
{ after(grammarAccess.getExpressionAccess().getLetExpressionParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getExpressionsAssignment_0()); }
(rule__Body__ExpressionsAssignment_0)
{ after(grammarAccess.getBodyAccess().getExpressionsAssignment_0()); }
)

    |(
{ before(grammarAccess.getBodyAccess().getGroup_1()); }
(rule__Body__Group_1__0)
{ after(grammarAccess.getBodyAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getLiteralExpressionParserRuleCall_0()); }
	ruleLiteralExpression
{ after(grammarAccess.getTermAccess().getLiteralExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTermAccess().getApplyParserRuleCall_1()); }
	ruleApply
{ after(grammarAccess.getTermAccess().getApplyParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Functor__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctorAccess().getSymbolReferenceParserRuleCall_0()); }
	ruleSymbolReference
{ after(grammarAccess.getFunctorAccess().getSymbolReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFunctorAccess().getParenthesisExpressionParserRuleCall_1()); }
	ruleParenthesisExpression
{ after(grammarAccess.getFunctorAccess().getParenthesisExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralNumberParserRuleCall_0()); }
	ruleLiteralNumber
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralNumberParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralBooleanParserRuleCall_1()); }
	ruleLiteralBoolean
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralBooleanParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionOperatorAccess().getAddEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAdditionOperatorAccess().getAddEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAdditionOperatorAccess().getSubtractEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAdditionOperatorAccess().getSubtractEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactorOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorOperatorAccess().getMultEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getFactorOperatorAccess().getMultEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getFactorOperatorAccess().getDivisionEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getFactorOperatorAccess().getDivisionEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorAccess().getGtEnumLiteralDeclaration_0()); }
(	'>' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getGtEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getGteEnumLiteralDeclaration_1()); }
(	'>=' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getGteEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getLtEnumLiteralDeclaration_2()); }
(	'<' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getLtEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getLteEnumLiteralDeclaration_3()); }
(	'<=' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getLteEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getEqEnumLiteralDeclaration_4()); }
(	'==' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getEqEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getNoteqEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getNoteqEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicalOperatorAccess().getAndEnumLiteralDeclaration_0()); }
(	'and' 
)
{ after(grammarAccess.getBinaryLogicalOperatorAccess().getAndEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBinaryLogicalOperatorAccess().getOrEnumLiteralDeclaration_1()); }
(	'or' 
)
{ after(grammarAccess.getBinaryLogicalOperatorAccess().getOrEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getTrueEnumLiteralDeclaration_0()); }
(	'true' 
)
{ after(grammarAccess.getBooleanValueAccess().getTrueEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBooleanValueAccess().getFalseEnumLiteralDeclaration_1()); }
(	'false' 
)
{ after(grammarAccess.getBooleanValueAccess().getFalseEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getExpressionsAssignment_0()); }
(rule__Program__ExpressionsAssignment_0)
{ after(grammarAccess.getProgramAccess().getExpressionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getGroup_2()); }
(rule__Program__Group_2__0)*
{ after(grammarAccess.getProgramAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Program__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group_2__0__Impl
	rule__Program__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getExpressionsAssignment_2_0()); }
(rule__Program__ExpressionsAssignment_2_0)
{ after(grammarAccess.getProgramAccess().getExpressionsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_2_1()); }

	';' 

{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LetExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__0__Impl
	rule__LetExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getLetKeyword_0()); }

	'let' 

{ after(grammarAccess.getLetExpressionAccess().getLetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__1__Impl
	rule__LetExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getGroup_1()); }
(rule__LetExpression__Group_1__0)
{ after(grammarAccess.getLetExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getExpressionAssignment_2()); }
(rule__LetExpression__ExpressionAssignment_2)
{ after(grammarAccess.getLetExpressionAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LetExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group_1__0__Impl
	rule__LetExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getAssigmentAssignment_1_0()); }
(rule__LetExpression__AssigmentAssignment_1_0)
{ after(grammarAccess.getLetExpressionAccess().getAssigmentAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getCommaKeyword_1_1()); }

	',' 

{ after(grammarAccess.getLetExpressionAccess().getCommaKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TernaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__0__Impl
	rule__TernaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getOperatorAssignment_0()); }
(rule__TernaryExpression__OperatorAssignment_0)
{ after(grammarAccess.getTernaryExpressionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__1__Impl
	rule__TernaryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getTernaryExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__2__Impl
	rule__TernaryExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getFirstExpressionAssignment_2()); }
(rule__TernaryExpression__FirstExpressionAssignment_2)
{ after(grammarAccess.getTernaryExpressionAccess().getFirstExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__3__Impl
	rule__TernaryExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getTernaryExpressionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__4__Impl
	rule__TernaryExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getSecondExpressionAssignment_4()); }
(rule__TernaryExpression__SecondExpressionAssignment_4)
{ after(grammarAccess.getTernaryExpressionAccess().getSecondExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__5__Impl
	rule__TernaryExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getTernaryExpressionAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__6__Impl
	rule__TernaryExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getThirdExpressionAssignment_6()); }
(rule__TernaryExpression__ThirdExpressionAssignment_6)
{ after(grammarAccess.getTernaryExpressionAccess().getThirdExpressionAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getTernaryExpressionAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__LogicalBinaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalBinaryExpression__Group__0__Impl
	rule__LogicalBinaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalBinaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalBinaryExpressionAccess().getOperatorAssignment_0()); }
(rule__LogicalBinaryExpression__OperatorAssignment_0)
{ after(grammarAccess.getLogicalBinaryExpressionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalBinaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalBinaryExpression__Group__1__Impl
	rule__LogicalBinaryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalBinaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalBinaryExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getLogicalBinaryExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalBinaryExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalBinaryExpression__Group__2__Impl
	rule__LogicalBinaryExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalBinaryExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalBinaryExpressionAccess().getLeftExprAssignment_2()); }
(rule__LogicalBinaryExpression__LeftExprAssignment_2)
{ after(grammarAccess.getLogicalBinaryExpressionAccess().getLeftExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalBinaryExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalBinaryExpression__Group__3__Impl
	rule__LogicalBinaryExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalBinaryExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalBinaryExpressionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getLogicalBinaryExpressionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalBinaryExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalBinaryExpression__Group__4__Impl
	rule__LogicalBinaryExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalBinaryExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalBinaryExpressionAccess().getRightExprAssignment_4()); }
(rule__LogicalBinaryExpression__RightExprAssignment_4)
{ after(grammarAccess.getLogicalBinaryExpressionAccess().getRightExprAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalBinaryExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalBinaryExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalBinaryExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalBinaryExpressionAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getLogicalBinaryExpressionAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__LogicalUnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalUnaryExpression__Group__0__Impl
	rule__LogicalUnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalUnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalUnaryExpressionAccess().getOperatorAssignment_0()); }
(rule__LogicalUnaryExpression__OperatorAssignment_0)
{ after(grammarAccess.getLogicalUnaryExpressionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalUnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalUnaryExpression__Group__1__Impl
	rule__LogicalUnaryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalUnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalUnaryExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getLogicalUnaryExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalUnaryExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalUnaryExpression__Group__2__Impl
	rule__LogicalUnaryExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalUnaryExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalUnaryExpressionAccess().getExpressionAssignment_2()); }
(rule__LogicalUnaryExpression__ExpressionAssignment_2)
{ after(grammarAccess.getLogicalUnaryExpressionAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalUnaryExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalUnaryExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalUnaryExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalUnaryExpressionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getLogicalUnaryExpressionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getNumericExpressionParserRuleCall_0()); }
	ruleNumericExpression
{ after(grammarAccess.getComparisonExpressionAccess().getNumericExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
(rule__ComparisonExpression__Group_1__0)?
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftExprAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftExprAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ComparisonExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightExprAssignment_1_2()); }
(rule__ComparisonExpression__RightExprAssignment_1_2)
{ after(grammarAccess.getComparisonExpressionAccess().getRightExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFuncKeyword_0()); }

	'func' 

{ after(grammarAccess.getFunctionDeclarationAccess().getFuncKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_2()); }
(rule__FunctionDeclaration__Group_2__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_4()); }
(rule__FunctionDeclaration__BodyAssignment_4)
{ after(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_2__0__Impl
	rule__FunctionDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_2_0()); }
(rule__FunctionDeclaration__ParametersAssignment_2_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_2_1()); }
(rule__FunctionDeclaration__Group_2_1__0)*
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_2_1__0__Impl
	rule__FunctionDeclaration__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_2_1_1()); }
(rule__FunctionDeclaration__ParametersAssignment_2_1_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Body__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group_1__0__Impl
	rule__Body__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getBodyAction_1_0()); }
(

)
{ after(grammarAccess.getBodyAccess().getBodyAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group_1__1__Impl
	rule__Body__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1_1()); }

	'{' 

{ after(grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group_1__2__Impl
	rule__Body__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getGroup_1_2()); }
(rule__Body__Group_1_2__0)*
{ after(grammarAccess.getBodyAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_1_3()); }

	'}' 

{ after(grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Body__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group_1_2__0__Impl
	rule__Body__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getExpressionsAssignment_1_2_0()); }
(rule__Body__ExpressionsAssignment_1_2_0)
{ after(grammarAccess.getBodyAccess().getExpressionsAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getSemicolonKeyword_1_2_1()); }

	';' 

{ after(grammarAccess.getBodyAccess().getSemicolonKeyword_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumericExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericExpression__Group__0__Impl
	rule__NumericExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericExpressionAccess().getFactorParserRuleCall_0()); }
	ruleFactor
{ after(grammarAccess.getNumericExpressionAccess().getFactorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericExpressionAccess().getGroup_1()); }
(rule__NumericExpression__Group_1__0)*
{ after(grammarAccess.getNumericExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumericExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericExpression__Group_1__0__Impl
	rule__NumericExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericExpressionAccess().getNumericExpressionLeftFactorAction_1_0()); }
(

)
{ after(grammarAccess.getNumericExpressionAccess().getNumericExpressionLeftFactorAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericExpression__Group_1__1__Impl
	rule__NumericExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericExpressionAccess().getOperatorAssignment_1_1()); }
(rule__NumericExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getNumericExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericExpressionAccess().getRightFactorAssignment_1_2()); }
(rule__NumericExpression__RightFactorAssignment_1_2)
{ after(grammarAccess.getNumericExpressionAccess().getRightFactorAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Factor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group__0__Impl
	rule__Factor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getTermParserRuleCall_0()); }
	ruleTerm
{ after(grammarAccess.getFactorAccess().getTermParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getGroup_1()); }
(rule__Factor__Group_1__0)*
{ after(grammarAccess.getFactorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Factor__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_1__0__Impl
	rule__Factor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getFactorLeftTermAction_1_0()); }
(

)
{ after(grammarAccess.getFactorAccess().getFactorLeftTermAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_1__1__Impl
	rule__Factor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getOperatorAssignment_1_1()); }
(rule__Factor__OperatorAssignment_1_1)
{ after(grammarAccess.getFactorAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getRightTermAssignment_1_2()); }
(rule__Factor__RightTermAssignment_1_2)
{ after(grammarAccess.getFactorAccess().getRightTermAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Apply__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group__0__Impl
	rule__Apply__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getFunctorParserRuleCall_0()); }
	ruleFunctor
{ after(grammarAccess.getApplyAccess().getFunctorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getGroup_1()); }
(rule__Apply__Group_1__0)*
{ after(grammarAccess.getApplyAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Apply__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_1__0__Impl
	rule__Apply__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getApplyFunctorAction_1_0()); }
(

)
{ after(grammarAccess.getApplyAccess().getApplyFunctorAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_1__1__Impl
	rule__Apply__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getApplyAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_1__2__Impl
	rule__Apply__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getGroup_1_2()); }
(rule__Apply__Group_1_2__0)?
{ after(grammarAccess.getApplyAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getApplyAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Apply__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_1_2__0__Impl
	rule__Apply__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getArgumentsAssignment_1_2_0()); }
(rule__Apply__ArgumentsAssignment_1_2_0)
{ after(grammarAccess.getApplyAccess().getArgumentsAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getGroup_1_2_1()); }
(rule__Apply__Group_1_2_1__0)*
{ after(grammarAccess.getApplyAccess().getGroup_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Apply__Group_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_1_2_1__0__Impl
	rule__Apply__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_1_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getCommaKeyword_1_2_1_0()); }

	',' 

{ after(grammarAccess.getApplyAccess().getCommaKeyword_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_1_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getArgumentsAssignment_1_2_1_1()); }
(rule__Apply__ArgumentsAssignment_1_2_1_1)
{ after(grammarAccess.getApplyAccess().getArgumentsAssignment_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableAssignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignment__Group__0__Impl
	rule__VariableAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getIdAssignment_0()); }
(rule__VariableAssignment__IdAssignment_0)
{ after(grammarAccess.getVariableAssignmentAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignment__Group__1__Impl
	rule__VariableAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getVariableAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getExpressionAssignment_2()); }
(rule__VariableAssignment__ExpressionAssignment_2)
{ after(grammarAccess.getVariableAssignmentAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParenthesisExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisExpression__Group__0__Impl
	rule__ParenthesisExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesisExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesisExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisExpression__Group__1__Impl
	rule__ParenthesisExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisExpressionAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getParenthesisExpressionAccess().getExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesisExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesisExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Program__ExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getExpressionsExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getProgramAccess().getExpressionsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ExpressionsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getExpressionsExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getProgramAccess().getExpressionsExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__AssigmentAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getAssigmentVariableAssignmentParserRuleCall_1_0_0()); }
	ruleVariableAssignment{ after(grammarAccess.getLetExpressionAccess().getAssigmentVariableAssignmentParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getLetExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getOperatorTernaryOperatorEnumRuleCall_0_0()); }
	ruleTernaryOperator{ after(grammarAccess.getTernaryExpressionAccess().getOperatorTernaryOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__FirstExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getFirstExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getTernaryExpressionAccess().getFirstExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__SecondExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getSecondExpressionExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getTernaryExpressionAccess().getSecondExpressionExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__ThirdExpressionAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getThirdExpressionExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getTernaryExpressionAccess().getThirdExpressionExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalBinaryExpression__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalBinaryExpressionAccess().getOperatorBinaryLogicalOperatorEnumRuleCall_0_0()); }
	ruleBinaryLogicalOperator{ after(grammarAccess.getLogicalBinaryExpressionAccess().getOperatorBinaryLogicalOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalBinaryExpression__LeftExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalBinaryExpressionAccess().getLeftExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getLogicalBinaryExpressionAccess().getLeftExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalBinaryExpression__RightExprAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalBinaryExpressionAccess().getRightExprExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getLogicalBinaryExpressionAccess().getRightExprExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalUnaryExpression__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalUnaryExpressionAccess().getOperatorUnaryLogicalOperatorEnumRuleCall_0_0()); }
	ruleUnaryLogicalOperator{ after(grammarAccess.getLogicalUnaryExpressionAccess().getOperatorUnaryLogicalOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalUnaryExpression__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalUnaryExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getLogicalUnaryExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_1_1_0()); }
	ruleComparisonOperator{ after(grammarAccess.getComparisonExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightExprNumericExpressionParserRuleCall_1_2_0()); }
	ruleNumericExpression{ after(grammarAccess.getComparisonExpressionAccess().getRightExprNumericExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParametersAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_2_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParametersAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_2_1_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyBodyParserRuleCall_4_0()); }
	ruleBody{ after(grammarAccess.getFunctionDeclarationAccess().getBodyBodyParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__ExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getExpressionsExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getBodyAccess().getExpressionsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__ExpressionsAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getExpressionsExpressionParserRuleCall_1_2_0_0()); }
	ruleExpression{ after(grammarAccess.getBodyAccess().getExpressionsExpressionParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__IdAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymbolReferenceAccess().getIdIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getSymbolReferenceAccess().getIdIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); }
	ruleAdditionOperator{ after(grammarAccess.getNumericExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__RightFactorAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericExpressionAccess().getRightFactorFactorParserRuleCall_1_2_0()); }
	ruleFactor{ after(grammarAccess.getNumericExpressionAccess().getRightFactorFactorParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getOperatorFactorOperatorEnumRuleCall_1_1_0()); }
	ruleFactorOperator{ after(grammarAccess.getFactorAccess().getOperatorFactorOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__RightTermAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getRightTermTermParserRuleCall_1_2_0()); }
	ruleTerm{ after(grammarAccess.getFactorAccess().getRightTermTermParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__ArgumentsAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getArgumentsExpressionParserRuleCall_1_2_0_0()); }
	ruleExpression{ after(grammarAccess.getApplyAccess().getArgumentsExpressionParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__ArgumentsAssignment_1_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getArgumentsExpressionParserRuleCall_1_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getApplyAccess().getArgumentsExpressionParserRuleCall_1_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralBoolean__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralBooleanAccess().getValueBooleanValueEnumRuleCall_0()); }
	ruleBooleanValue{ after(grammarAccess.getLiteralBooleanAccess().getValueBooleanValueEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNumber__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumberAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getLiteralNumberAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getIdIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getVariableAssignmentAccess().getIdIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getVariableAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



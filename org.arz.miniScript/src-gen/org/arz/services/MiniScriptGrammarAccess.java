/*
* generated by Xtext
*/

package org.arz.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MiniScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final RuleCall cProgramParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	Program;
		public ParserRule getRule() { return rule; }

		//Program
		public RuleCall getProgramParserRuleCall() { return cProgramParserRuleCall; }
	}

	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Program:
		//	expressions+=Expression ";" (expressions+=Expression ";")*;
		public ParserRule getRule() { return rule; }

		//expressions+=Expression ";" (expressions+=Expression ";")*
		public Group getGroup() { return cGroup; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }

		//(expressions+=Expression ";")*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0_0() { return cExpressionsExpressionParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumericExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression:
		//	FunctionDeclaration | VariableAssignment | NumericExpression;
		public ParserRule getRule() { return rule; }

		//FunctionDeclaration | VariableAssignment | NumericExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_0() { return cFunctionDeclarationParserRuleCall_0; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_1() { return cVariableAssignmentParserRuleCall_1; }

		//NumericExpression
		public RuleCall getNumericExpressionParserRuleCall_2() { return cNumericExpressionParserRuleCall_2; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersIDTerminalRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//FunctionDeclaration:
		//	"func" "(" (parameters+=ID ("," parameters+=ID)*)? ")" body=Body;
		public ParserRule getRule() { return rule; }

		//"func" "(" (parameters+=ID ("," parameters+=ID)*)? ")" body=Body
		public Group getGroup() { return cGroup; }

		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameters+=ID ("," parameters+=ID)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=ID
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_2_0_0() { return cParametersIDTerminalRuleCall_2_0_0; }

		//("," parameters+=ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=ID
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_2_1_1_0() { return cParametersIDTerminalRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=Body
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Body
		public RuleCall getBodyBodyParserRuleCall_4_0() { return cBodyBodyParserRuleCall_4_0; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBodyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cExpressionsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_2_0_0 = (RuleCall)cExpressionsAssignment_1_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Body:
		//	expressions+=Expression | {Body} "{" (expressions+=Expression ";")* "}";
		public ParserRule getRule() { return rule; }

		//expressions+=Expression | {Body} "{" (expressions+=Expression ";")* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }

		//{Body} "{" (expressions+=Expression ";")* "}"
		public Group getGroup_1() { return cGroup_1; }

		//{Body}
		public Action getBodyAction_1_0() { return cBodyAction_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//(expressions+=Expression ";")*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_2_0() { return cExpressionsAssignment_1_2_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_2_0_0() { return cExpressionsExpressionParserRuleCall_1_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_2_1() { return cSemicolonKeyword_1_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class ApplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Apply");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFunctorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cApplyFunctorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cArgumentsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_2_0_0 = (RuleCall)cArgumentsAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_2_1_1_0 = (RuleCall)cArgumentsAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Apply returns Expression:
		//	Functor ({Apply.functor=current} "(" (arguments+=Expression ("," arguments+=Expression)*)? ")")*;
		public ParserRule getRule() { return rule; }

		//Functor ({Apply.functor=current} "(" (arguments+=Expression ("," arguments+=Expression)*)? ")")*
		public Group getGroup() { return cGroup; }

		//Functor
		public RuleCall getFunctorParserRuleCall_0() { return cFunctorParserRuleCall_0; }

		//({Apply.functor=current} "(" (arguments+=Expression ("," arguments+=Expression)*)? ")")*
		public Group getGroup_1() { return cGroup_1; }

		//{Apply.functor=current}
		public Action getApplyFunctorAction_1_0() { return cApplyFunctorAction_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_2_0() { return cArgumentsAssignment_1_2_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_2_0_0() { return cArgumentsExpressionParserRuleCall_1_2_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//","
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_2_1_1() { return cArgumentsAssignment_1_2_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_2_1_1_0() { return cArgumentsExpressionParserRuleCall_1_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class FunctorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Functor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSymbolReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Functor returns Expression:
		//	SymbolReference | ParenthesisExpression;
		public ParserRule getRule() { return rule; }

		//SymbolReference | ParenthesisExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SymbolReference
		public RuleCall getSymbolReferenceParserRuleCall_0() { return cSymbolReferenceParserRuleCall_0; }

		//ParenthesisExpression
		public RuleCall getParenthesisExpressionParserRuleCall_1() { return cParenthesisExpressionParserRuleCall_1; }
	}

	public class LiteralExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralExpr");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNumTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralExpr:
		//	value=Num;
		public ParserRule getRule() { return rule; }

		//value=Num
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Num
		public RuleCall getValueNumTerminalRuleCall_0() { return cValueNumTerminalRuleCall_0; }
	}

	public class SymbolReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolReference");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//SymbolReference:
		//	id=ID;
		public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class NumericExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNumericExpressionLeftFactorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightFactorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorFactorParserRuleCall_1_2_0 = (RuleCall)cRightFactorAssignment_1_2.eContents().get(0);
		
		//NumericExpression returns Expression:
		//	Factor ({NumericExpression.leftFactor=current} operator=("+" | "-") rightFactor=Factor)*;
		public ParserRule getRule() { return rule; }

		//Factor ({NumericExpression.leftFactor=current} operator=("+" | "-") rightFactor=Factor)*
		public Group getGroup() { return cGroup; }

		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }

		//({NumericExpression.leftFactor=current} operator=("+" | "-") rightFactor=Factor)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumericExpression.leftFactor=current}
		public Action getNumericExpressionLeftFactorAction_1_0() { return cNumericExpressionLeftFactorAction_1_0; }

		//operator=("+" | "-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"+" | "-"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }

		//rightFactor=Factor
		public Assignment getRightFactorAssignment_1_2() { return cRightFactorAssignment_1_2; }

		//Factor
		public RuleCall getRightFactorFactorParserRuleCall_1_2_0() { return cRightFactorFactorParserRuleCall_1_2_0; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFactorLeftTermAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightTermAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTermTermParserRuleCall_1_2_0 = (RuleCall)cRightTermAssignment_1_2.eContents().get(0);
		
		//Factor returns Expression:
		//	Term ({Factor.leftTerm=current} operator=("*" | "/") rightTerm=Term)*;
		public ParserRule getRule() { return rule; }

		//Term ({Factor.leftTerm=current} operator=("*" | "/") rightTerm=Term)*
		public Group getGroup() { return cGroup; }

		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }

		//({Factor.leftTerm=current} operator=("*" | "/") rightTerm=Term)*
		public Group getGroup_1() { return cGroup_1; }

		//{Factor.leftTerm=current}
		public Action getFactorLeftTermAction_1_0() { return cFactorLeftTermAction_1_0; }

		//operator=("*" | "/")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"*" | "/"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }

		//rightTerm=Term
		public Assignment getRightTermAssignment_1_2() { return cRightTermAssignment_1_2; }

		//Term
		public RuleCall getRightTermTermParserRuleCall_1_2_0() { return cRightTermTermParserRuleCall_1_2_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cApplyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Term returns Expression:
		//	LiteralExpr | Apply;
		public ParserRule getRule() { return rule; }

		//LiteralExpr | Apply
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralExpr
		public RuleCall getLiteralExprParserRuleCall_0() { return cLiteralExprParserRuleCall_0; }

		//Apply
		public RuleCall getApplyParserRuleCall_1() { return cApplyParserRuleCall_1; }
	}

	public class VariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//VariableAssignment:
		//	id=ID "=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//id=ID "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class ParenthesisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesisExpression returns Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	private ModelElements pModel;
	private ProgramElements pProgram;
	private ExpressionElements pExpression;
	private FunctionDeclarationElements pFunctionDeclaration;
	private BodyElements pBody;
	private ApplyElements pApply;
	private FunctorElements pFunctor;
	private LiteralExprElements pLiteralExpr;
	private SymbolReferenceElements pSymbolReference;
	private NumericExpressionElements pNumericExpression;
	private FactorElements pFactor;
	private TermElements pTerm;
	private VariableAssignmentElements pVariableAssignment;
	private ParenthesisExpressionElements pParenthesisExpression;
	private TerminalRule tNum;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniScriptGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Program;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Program:
	//	expressions+=Expression ";" (expressions+=Expression ";")*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Expression:
	//	FunctionDeclaration | VariableAssignment | NumericExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//FunctionDeclaration:
	//	"func" "(" (parameters+=ID ("," parameters+=ID)*)? ")" body=Body;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return (pFunctionDeclaration != null) ? pFunctionDeclaration : (pFunctionDeclaration = new FunctionDeclarationElements());
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//Body:
	//	expressions+=Expression | {Body} "{" (expressions+=Expression ";")* "}";
	public BodyElements getBodyAccess() {
		return (pBody != null) ? pBody : (pBody = new BodyElements());
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//Apply returns Expression:
	//	Functor ({Apply.functor=current} "(" (arguments+=Expression ("," arguments+=Expression)*)? ")")*;
	public ApplyElements getApplyAccess() {
		return (pApply != null) ? pApply : (pApply = new ApplyElements());
	}
	
	public ParserRule getApplyRule() {
		return getApplyAccess().getRule();
	}

	//Functor returns Expression:
	//	SymbolReference | ParenthesisExpression;
	public FunctorElements getFunctorAccess() {
		return (pFunctor != null) ? pFunctor : (pFunctor = new FunctorElements());
	}
	
	public ParserRule getFunctorRule() {
		return getFunctorAccess().getRule();
	}

	//LiteralExpr:
	//	value=Num;
	public LiteralExprElements getLiteralExprAccess() {
		return (pLiteralExpr != null) ? pLiteralExpr : (pLiteralExpr = new LiteralExprElements());
	}
	
	public ParserRule getLiteralExprRule() {
		return getLiteralExprAccess().getRule();
	}

	//SymbolReference:
	//	id=ID;
	public SymbolReferenceElements getSymbolReferenceAccess() {
		return (pSymbolReference != null) ? pSymbolReference : (pSymbolReference = new SymbolReferenceElements());
	}
	
	public ParserRule getSymbolReferenceRule() {
		return getSymbolReferenceAccess().getRule();
	}

	//NumericExpression returns Expression:
	//	Factor ({NumericExpression.leftFactor=current} operator=("+" | "-") rightFactor=Factor)*;
	public NumericExpressionElements getNumericExpressionAccess() {
		return (pNumericExpression != null) ? pNumericExpression : (pNumericExpression = new NumericExpressionElements());
	}
	
	public ParserRule getNumericExpressionRule() {
		return getNumericExpressionAccess().getRule();
	}

	//Factor returns Expression:
	//	Term ({Factor.leftTerm=current} operator=("*" | "/") rightTerm=Term)*;
	public FactorElements getFactorAccess() {
		return (pFactor != null) ? pFactor : (pFactor = new FactorElements());
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//Term returns Expression:
	//	LiteralExpr | Apply;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//VariableAssignment:
	//	id=ID "=" expression=Expression;
	public VariableAssignmentElements getVariableAssignmentAccess() {
		return (pVariableAssignment != null) ? pVariableAssignment : (pVariableAssignment = new VariableAssignmentElements());
	}
	
	public ParserRule getVariableAssignmentRule() {
		return getVariableAssignmentAccess().getRule();
	}

	//ParenthesisExpression returns Expression:
	//	"(" Expression ")";
	public ParenthesisExpressionElements getParenthesisExpressionAccess() {
		return (pParenthesisExpression != null) ? pParenthesisExpression : (pParenthesisExpression = new ParenthesisExpressionElements());
	}
	
	public ParserRule getParenthesisExpressionRule() {
		return getParenthesisExpressionAccess().getRule();
	}

	//terminal Num:
	//	"0".."9";
	public TerminalRule getNumRule() {
		return (tNum != null) ? tNum : (tNum = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Num"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

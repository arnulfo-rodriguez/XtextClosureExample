grammar org.arz.MiniScript with org.eclipse.xtext.common.Terminals

generate miniScript "http://www.arz.org/miniScript"



Model:
	Program;


Program:
	expressions+=Expression ';' (expressions+=Expression ';')*
;

enum AdditionOperator : add='+' | subtract='-' ;
enum FactorOperator:  mult='*' | division='/';
enum ComparisonOperator: gt='>' | gte='>=' | lt='<' | lte='<=' | eq='==' | noteq='!=';
enum UnaryLogicalOperator: not='not';
enum BinaryLogicalOperator: and='and' | or='or';
enum TernaryOperator: ifExpression ='if';
enum BooleanValue: true='true' | false='false';


Expression:
 	FunctionDeclaration  | 
    VariableAssignment |
	LogicalBinaryExpression |
	LogicalUnaryExpression |
	TernaryExpression |
	ComparisonExpression |
	LetExpression |
	BlockExpression
;

BlockExpression:
	'{'(expressions+=Expression ';')+ '}'
;


LetExpression:
	'let' (assigment = VariableAssignment ',') expression = Expression
;


TernaryExpression:
	operator=TernaryOperator '(' firstExpression=Expression ',' secondExpression=Expression ',' thirdExpression=Expression')'
;


LogicalBinaryExpression:
	operator=BinaryLogicalOperator '(' leftExpr=Expression ',' rightExpr=Expression ')'
;

LogicalUnaryExpression:
	operator=UnaryLogicalOperator '(' expression=Expression ')'
;

ComparisonExpression returns Expression:
	NumericExpression ({ComparisonExpression.leftExpr=current} operator=ComparisonOperator rightExpr=NumericExpression)?
;


FunctionDeclaration:
	'func' '(' (parameters+=ID (',' parameters+=ID)*)? ')' body=Expression
;


SymbolReference :
	id=ID
;


NumericExpression returns Expression:
	Factor ({NumericExpression.leftFactor=current} operator=AdditionOperator rightFactor=Factor)*
;

Factor returns Expression: 
	Term ({Factor.leftTerm=current} operator=FactorOperator rightTerm=Term)*
;

Term returns Expression:
 	LiteralExpression | Apply ;

Apply returns Expression:
	Functor ({Apply.functor=current} '(' (arguments+=Expression (',' arguments+=Expression)*)? ')')*
;

Functor returns Expression:
	SymbolReference |
	ParenthesisExpression
;

LiteralExpression returns Expression:
	LiteralNumber |
	LiteralBoolean
;

LiteralBoolean:
	value=BooleanValue
;


LiteralNumber :
	value=INT
;

VariableAssignment :
	id=ID '=' expression=Expression
;

ParenthesisExpression returns Expression:
	'(' Expression ')'
;



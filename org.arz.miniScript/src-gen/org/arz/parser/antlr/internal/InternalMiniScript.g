/*
* generated by Xtext
*/
grammar InternalMiniScript;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.arz.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.arz.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.arz.services.MiniScriptGrammarAccess;

}

@parser::members {

 	private MiniScriptGrammarAccess grammarAccess;
 	
    public InternalMiniScriptParser(TokenStream input, MiniScriptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MiniScriptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getModelAccess().getProgramParserRuleCall()); 
    }
    this_Program_0=ruleProgram
    { 
        $current = $this_Program_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getExpressionsExpressionParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProgramAccess().getSemicolonKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getExpressionExpressionParserRuleCall_2_0_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProgramAccess().getSemicolonKeyword_2_1());
    }
)*)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getFunctionDeclarationParserRuleCall_0()); 
    }
    this_FunctionDeclaration_0=ruleFunctionDeclaration
    { 
        $current = $this_FunctionDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getNumericExpressionParserRuleCall_1()); 
    }
    this_NumericExpression_1=ruleNumericExpression
    { 
        $current = $this_NumericExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='func' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFuncKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParametersFunctionParametersParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=ruleFunctionParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"FunctionParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyBodyParserRuleCall_4_0()); 
	    }
		lv_body_4_0=ruleBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"Body");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	 iv_ruleBody=ruleBody 
	 { $current=$iv_ruleBody.current; } 
	 EOF 
;

// Rule Body
ruleBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getExpressionsExpressionParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBodyAccess().getBodyAction_1_0(),
            $current);
    }
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getExpressionsExpressionParserRuleCall_1_2_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_1_3());
    }
))
;





// Entry rule entryRuleFunctionParameters
entryRuleFunctionParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionParametersRule()); }
	 iv_ruleFunctionParameters=ruleFunctionParameters 
	 { $current=$iv_ruleFunctionParameters.current; } 
	 EOF 
;

// Rule FunctionParameters
ruleFunctionParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionParametersAccess().getFunctionParametersAction_0_0(),
            $current);
    }
)(
(
		lv_parameters_1_0=RULE_ID
		{
			newLeafNode(lv_parameters_1_0, grammarAccess.getFunctionParametersAccess().getParametersIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionParametersRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameters",
        		lv_parameters_1_0, 
        		"ID");
	    }

)
)?)
    |((
(
		lv_parameters_2_0=RULE_ID
		{
			newLeafNode(lv_parameters_2_0, grammarAccess.getFunctionParametersAccess().getParametersIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionParametersRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionParametersAccess().getCommaKeyword_1_1_0());
    }
(
(
		lv_parameters_4_0=RULE_ID
		{
			newLeafNode(lv_parameters_4_0, grammarAccess.getFunctionParametersAccess().getParametersIDTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionParametersRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"ID");
	    }

)
))+))
;





// Entry rule entryRuleApplyFunction
entryRuleApplyFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getApplyFunctionRule()); }
	 iv_ruleApplyFunction=ruleApplyFunction 
	 { $current=$iv_ruleApplyFunction.current; } 
	 EOF 
;

// Rule ApplyFunction
ruleApplyFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getApplyFunctionAccess().getFunctorSymbolReferenceParserRuleCall_0_0()); 
	    }
		lv_functor_0_0=ruleSymbolReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplyFunctionRule());
	        }
       		set(
       			$current, 
       			"functor",
        		lv_functor_0_0, 
        		"SymbolReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getApplyFunctionAccess().getApp3ApplyFunctionAlphaParserRuleCall_1_0()); 
	    }
		lv_app3_1_0=ruleApplyFunctionAlpha		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplyFunctionRule());
	        }
       		set(
       			$current, 
       			"app3",
        		lv_app3_1_0, 
        		"ApplyFunctionAlpha");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleApplyFunctionAlpha
entryRuleApplyFunctionAlpha returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getApplyFunctionAlphaRule()); }
	 iv_ruleApplyFunctionAlpha=ruleApplyFunctionAlpha 
	 { $current=$iv_ruleApplyFunctionAlpha.current; } 
	 EOF 
;

// Rule ApplyFunctionAlpha
ruleApplyFunctionAlpha returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getApplyFunctionAlphaAccess().getApplyFunctionAlphaAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getApplyFunctionAlphaAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getApplyFunctionAlphaAccess().getArgsFunctionArgumentsParserRuleCall_2_0()); 
	    }
		lv_args_2_0=ruleFunctionArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplyFunctionAlphaRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"FunctionArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getApplyFunctionAlphaAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getApplyFunctionAlphaAccess().getNextCallApplyFunctionAlphaParserRuleCall_4_0()); 
	    }
		lv_nextCall_4_0=ruleApplyFunctionAlpha		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplyFunctionAlphaRule());
	        }
       		set(
       			$current, 
       			"nextCall",
        		lv_nextCall_4_0, 
        		"ApplyFunctionAlpha");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFunctionArguments
entryRuleFunctionArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionArgumentsRule()); }
	 iv_ruleFunctionArguments=ruleFunctionArguments 
	 { $current=$iv_ruleFunctionArguments.current; } 
	 EOF 
;

// Rule FunctionArguments
ruleFunctionArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionArgumentsAccess().getArgumentsExpressionParserRuleCall_0_0()); 
	    }
		lv_arguments_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionArgumentsRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionArgumentsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionArgumentsAccess().getArgumentsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_arguments_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionArgumentsRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLiteralExpr
entryRuleLiteralExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExprRule()); }
	 iv_ruleLiteralExpr=ruleLiteralExpr 
	 { $current=$iv_ruleLiteralExpr.current; } 
	 EOF 
;

// Rule LiteralExpr
ruleLiteralExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_NUM
		{
			newLeafNode(lv_value_0_0, grammarAccess.getLiteralExprAccess().getValueNumTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Num");
	    }

)
)
;





// Entry rule entryRuleSymbolReference
entryRuleSymbolReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSymbolReferenceRule()); }
	 iv_ruleSymbolReference=ruleSymbolReference 
	 { $current=$iv_ruleSymbolReference.current; } 
	 EOF 
;

// Rule SymbolReference
ruleSymbolReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getSymbolReferenceAccess().getIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSymbolReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
;







// Entry rule entryRuleNumericExpression
entryRuleNumericExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericExpressionRule()); }
	 iv_ruleNumericExpression=ruleNumericExpression 
	 { $current=$iv_ruleNumericExpression.current; } 
	 EOF 
;

// Rule NumericExpression
ruleNumericExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNumericExpressionAccess().getFactorFactorParserRuleCall_0_0()); 
	    }
		lv_factor_0_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericExpressionRule());
	        }
       		set(
       			$current, 
       			"factor",
        		lv_factor_0_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericExpressionAccess().getExprTailExprTailParserRuleCall_1_0()); 
	    }
		lv_exprTail_1_0=ruleExprTail		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericExpressionRule());
	        }
       		set(
       			$current, 
       			"exprTail",
        		lv_exprTail_1_0, 
        		"ExprTail");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleExprTail
entryRuleExprTail returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprTailRule()); }
	 iv_ruleExprTail=ruleExprTail 
	 { $current=$iv_ruleExprTail.current; } 
	 EOF 
;

// Rule ExprTail
ruleExprTail returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='+' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExprTailAccess().getPlusSignKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprTailAccess().getFactorFactorParserRuleCall_0_1_0()); 
	    }
		lv_factor_1_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprTailRule());
	        }
       		set(
       			$current, 
       			"factor",
        		lv_factor_1_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprTailAccess().getExprTailExprTailParserRuleCall_0_2_0()); 
	    }
		lv_exprTail_2_0=ruleExprTail		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprTailRule());
	        }
       		set(
       			$current, 
       			"exprTail",
        		lv_exprTail_2_0, 
        		"ExprTail");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |(	otherlv_3='-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExprTailAccess().getHyphenMinusKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprTailAccess().getFactorFactorParserRuleCall_1_1_0()); 
	    }
		lv_factor_4_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprTailRule());
	        }
       		set(
       			$current, 
       			"factor",
        		lv_factor_4_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprTailAccess().getExprTailExprTailParserRuleCall_1_2_0()); 
	    }
		lv_exprTail_5_0=ruleExprTail		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprTailRule());
	        }
       		set(
       			$current, 
       			"exprTail",
        		lv_exprTail_5_0, 
        		"ExprTail");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	 iv_ruleFactor=ruleFactor 
	 { $current=$iv_ruleFactor.current; } 
	 EOF 
;

// Rule Factor
ruleFactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getTermTermParserRuleCall_0_0()); 
	    }
		lv_term_0_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_0_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getFactorTailFactorTailParserRuleCall_1_0()); 
	    }
		lv_factorTail_1_0=ruleFactorTail		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"factorTail",
        		lv_factorTail_1_0, 
        		"FactorTail");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFactorTail
entryRuleFactorTail returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorTailRule()); }
	 iv_ruleFactorTail=ruleFactorTail 
	 { $current=$iv_ruleFactorTail.current; } 
	 EOF 
;

// Rule FactorTail
ruleFactorTail returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='*' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFactorTailAccess().getAsteriskKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorTailAccess().getTermTermParserRuleCall_0_1_0()); 
	    }
		lv_term_1_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorTailRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_1_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorTailAccess().getFactorTailFactorTailParserRuleCall_0_2_0()); 
	    }
		lv_factorTail_2_0=ruleFactorTail		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorTailRule());
	        }
       		set(
       			$current, 
       			"factorTail",
        		lv_factorTail_2_0, 
        		"FactorTail");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |(	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFactorTailAccess().getSolidusKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorTailAccess().getTermTermParserRuleCall_1_1_0()); 
	    }
		lv_term_4_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorTailRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_4_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorTailAccess().getFactorTailFactorTailParserRuleCall_1_2_0()); 
	    }
		lv_factorTail_5_0=ruleFactorTail		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorTailRule());
	        }
       		set(
       			$current, 
       			"factorTail",
        		lv_factorTail_5_0, 
        		"FactorTail");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getLiteralExprParserRuleCall_0()); 
    }
    this_LiteralExpr_0=ruleLiteralExpr
    { 
        $current = $this_LiteralExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTermAccess().getApplyFunctionParserRuleCall_1()); 
    }
    this_ApplyFunction_1=ruleApplyFunction
    { 
        $current = $this_ApplyFunction_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTermAccess().getParenthesisExpressionParserRuleCall_2()); 
    }
    this_ParenthesisExpression_2=ruleParenthesisExpression
    { 
        $current = $this_ParenthesisExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthesisExpression
entryRuleParenthesisExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesisExpressionRule()); }
	 iv_ruleParenthesisExpression=ruleParenthesisExpression 
	 { $current=$iv_ruleParenthesisExpression.current; } 
	 EOF 
;

// Rule ParenthesisExpression
ruleParenthesisExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesisExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParenthesisExpressionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesisExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





RULE_NUM : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



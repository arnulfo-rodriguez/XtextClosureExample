/*
* generated by Xtext
*/
grammar InternalMiniScript;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.arz.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.arz.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.arz.services.MiniScriptGrammarAccess;

}

@parser::members {

 	private MiniScriptGrammarAccess grammarAccess;
 	
    public InternalMiniScriptParser(TokenStream input, MiniScriptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MiniScriptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getModelAccess().getProgramParserRuleCall()); 
    }
    this_Program_0=ruleProgram
    { 
        $current = $this_Program_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getExpressionsExpressionParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProgramAccess().getSemicolonKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getExpressionsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_expressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProgramAccess().getSemicolonKeyword_2_1());
    }
)*)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getFunctionDeclarationParserRuleCall_0()); 
    }
    this_FunctionDeclaration_0=ruleFunctionDeclaration
    { 
        $current = $this_FunctionDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getVariableAssignmentParserRuleCall_1()); 
    }
    this_VariableAssignment_1=ruleVariableAssignment
    { 
        $current = $this_VariableAssignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLogicalBinaryExpressionParserRuleCall_2()); 
    }
    this_LogicalBinaryExpression_2=ruleLogicalBinaryExpression
    { 
        $current = $this_LogicalBinaryExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLogicalUnaryExpressionParserRuleCall_3()); 
    }
    this_LogicalUnaryExpression_3=ruleLogicalUnaryExpression
    { 
        $current = $this_LogicalUnaryExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getTernaryExpressionParserRuleCall_4()); 
    }
    this_TernaryExpression_4=ruleTernaryExpression
    { 
        $current = $this_TernaryExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getComparisonExpressionParserRuleCall_5()); 
    }
    this_ComparisonExpression_5=ruleComparisonExpression
    { 
        $current = $this_ComparisonExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLetExpressionParserRuleCall_6()); 
    }
    this_LetExpression_6=ruleLetExpression
    { 
        $current = $this_LetExpression_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBlockExpressionParserRuleCall_7()); 
    }
    this_BlockExpression_7=ruleBlockExpression
    { 
        $current = $this_BlockExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBlockExpression
entryRuleBlockExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockExpressionRule()); }
	 iv_ruleBlockExpression=ruleBlockExpression 
	 { $current=$iv_ruleBlockExpression.current; } 
	 EOF 
;

// Rule BlockExpression
ruleBlockExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockExpressionAccess().getExpressionsExpressionParserRuleCall_1_0_0()); 
	    }
		lv_expressions_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_1_1());
    }
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleLetExpression
entryRuleLetExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetExpressionRule()); }
	 iv_ruleLetExpression=ruleLetExpression 
	 { $current=$iv_ruleLetExpression.current; } 
	 EOF 
;

// Rule LetExpression
ruleLetExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='let' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLetExpressionAccess().getLetKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getAssigmentVariableAssignmentParserRuleCall_1_0_0()); 
	    }
		lv_assigment_1_0=ruleVariableAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		set(
       			$current, 
       			"assigment",
        		lv_assigment_1_0, 
        		"VariableAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLetExpressionAccess().getCommaKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTernaryExpression
entryRuleTernaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTernaryExpressionRule()); }
	 iv_ruleTernaryExpression=ruleTernaryExpression 
	 { $current=$iv_ruleTernaryExpression.current; } 
	 EOF 
;

// Rule TernaryExpression
ruleTernaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTernaryExpressionAccess().getOperatorTernaryOperatorEnumRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleTernaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTernaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"TernaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTernaryExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTernaryExpressionAccess().getFirstExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_firstExpression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTernaryExpressionRule());
	        }
       		set(
       			$current, 
       			"firstExpression",
        		lv_firstExpression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTernaryExpressionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTernaryExpressionAccess().getSecondExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_secondExpression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTernaryExpressionRule());
	        }
       		set(
       			$current, 
       			"secondExpression",
        		lv_secondExpression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTernaryExpressionAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTernaryExpressionAccess().getThirdExpressionExpressionParserRuleCall_6_0()); 
	    }
		lv_thirdExpression_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTernaryExpressionRule());
	        }
       		set(
       			$current, 
       			"thirdExpression",
        		lv_thirdExpression_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTernaryExpressionAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleLogicalBinaryExpression
entryRuleLogicalBinaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalBinaryExpressionRule()); }
	 iv_ruleLogicalBinaryExpression=ruleLogicalBinaryExpression 
	 { $current=$iv_ruleLogicalBinaryExpression.current; } 
	 EOF 
;

// Rule LogicalBinaryExpression
ruleLogicalBinaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalBinaryExpressionAccess().getOperatorBinaryLogicalOperatorEnumRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleBinaryLogicalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalBinaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"BinaryLogicalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogicalBinaryExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalBinaryExpressionAccess().getLeftExprExpressionParserRuleCall_2_0()); 
	    }
		lv_leftExpr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalBinaryExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExpr",
        		lv_leftExpr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLogicalBinaryExpressionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalBinaryExpressionAccess().getRightExprExpressionParserRuleCall_4_0()); 
	    }
		lv_rightExpr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalBinaryExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLogicalBinaryExpressionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleLogicalUnaryExpression
entryRuleLogicalUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalUnaryExpressionRule()); }
	 iv_ruleLogicalUnaryExpression=ruleLogicalUnaryExpression 
	 { $current=$iv_ruleLogicalUnaryExpression.current; } 
	 EOF 
;

// Rule LogicalUnaryExpression
ruleLogicalUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalUnaryExpressionAccess().getOperatorUnaryLogicalOperatorEnumRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleUnaryLogicalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"UnaryLogicalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogicalUnaryExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalUnaryExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLogicalUnaryExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	 iv_ruleComparisonExpression=ruleComparisonExpression 
	 { $current=$iv_ruleComparisonExpression.current; } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getNumericExpressionParserRuleCall_0()); 
    }
    this_NumericExpression_0=ruleNumericExpression
    { 
        $current = $this_NumericExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleComparisonOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ComparisonOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightExprNumericExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpr_3_0=ruleNumericExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_3_0, 
        		"NumericExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='func' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFuncKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_1());
    }
((
(
		lv_parameters_2_0=RULE_ID
		{
			newLeafNode(lv_parameters_2_0, grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_2_1_0());
    }
(
(
		lv_parameters_4_0=RULE_ID
		{
			newLeafNode(lv_parameters_4_0, grammarAccess.getFunctionDeclarationAccess().getParametersIDTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"ID");
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyExpressionParserRuleCall_4_0()); 
	    }
		lv_body_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSymbolReference
entryRuleSymbolReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSymbolReferenceRule()); }
	 iv_ruleSymbolReference=ruleSymbolReference 
	 { $current=$iv_ruleSymbolReference.current; } 
	 EOF 
;

// Rule SymbolReference
ruleSymbolReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getSymbolReferenceAccess().getIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSymbolReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleNumericExpression
entryRuleNumericExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericExpressionRule()); }
	 iv_ruleNumericExpression=ruleNumericExpression 
	 { $current=$iv_ruleNumericExpression.current; } 
	 EOF 
;

// Rule NumericExpression
ruleNumericExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericExpressionAccess().getFactorParserRuleCall_0()); 
    }
    this_Factor_0=ruleFactor
    { 
        $current = $this_Factor_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumericExpressionAccess().getNumericExpressionLeftFactorAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAdditionOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AdditionOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericExpressionAccess().getRightFactorFactorParserRuleCall_1_2_0()); 
	    }
		lv_rightFactor_3_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericExpressionRule());
	        }
       		set(
       			$current, 
       			"rightFactor",
        		lv_rightFactor_3_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	 iv_ruleFactor=ruleFactor 
	 { $current=$iv_ruleFactor.current; } 
	 EOF 
;

// Rule Factor
ruleFactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getTermParserRuleCall_0()); 
    }
    this_Term_0=ruleTerm
    { 
        $current = $this_Term_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getFactorAccess().getFactorLeftTermAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getOperatorFactorOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleFactorOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"FactorOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getRightTermTermParserRuleCall_1_2_0()); 
	    }
		lv_rightTerm_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"rightTerm",
        		lv_rightTerm_3_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getLiteralExpressionParserRuleCall_0()); 
    }
    this_LiteralExpression_0=ruleLiteralExpression
    { 
        $current = $this_LiteralExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTermAccess().getApplyParserRuleCall_1()); 
    }
    this_Apply_1=ruleApply
    { 
        $current = $this_Apply_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleApply
entryRuleApply returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getApplyRule()); }
	 iv_ruleApply=ruleApply 
	 { $current=$iv_ruleApply.current; } 
	 EOF 
;

// Rule Apply
ruleApply returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getApplyAccess().getFunctorParserRuleCall_0()); 
    }
    this_Functor_0=ruleFunctor
    { 
        $current = $this_Functor_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getApplyAccess().getApplyFunctorAction_1_0(),
            $current);
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getApplyAccess().getLeftParenthesisKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getApplyAccess().getArgumentsExpressionParserRuleCall_1_2_0_0()); 
	    }
		lv_arguments_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplyRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getApplyAccess().getCommaKeyword_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getApplyAccess().getArgumentsExpressionParserRuleCall_1_2_1_1_0()); 
	    }
		lv_arguments_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplyRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getApplyAccess().getRightParenthesisKeyword_1_3());
    }
)*)
;





// Entry rule entryRuleFunctor
entryRuleFunctor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctorRule()); }
	 iv_ruleFunctor=ruleFunctor 
	 { $current=$iv_ruleFunctor.current; } 
	 EOF 
;

// Rule Functor
ruleFunctor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctorAccess().getSymbolReferenceParserRuleCall_0()); 
    }
    this_SymbolReference_0=ruleSymbolReference
    { 
        $current = $this_SymbolReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunctorAccess().getParenthesisExpressionParserRuleCall_1()); 
    }
    this_ParenthesisExpression_1=ruleParenthesisExpression
    { 
        $current = $this_ParenthesisExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteralNumberParserRuleCall_0()); 
    }
    this_LiteralNumber_0=ruleLiteralNumber
    { 
        $current = $this_LiteralNumber_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteralBooleanParserRuleCall_1()); 
    }
    this_LiteralBoolean_1=ruleLiteralBoolean
    { 
        $current = $this_LiteralBoolean_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralBoolean
entryRuleLiteralBoolean returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralBooleanRule()); }
	 iv_ruleLiteralBoolean=ruleLiteralBoolean 
	 { $current=$iv_ruleLiteralBoolean.current; } 
	 EOF 
;

// Rule LiteralBoolean
ruleLiteralBoolean returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralBooleanAccess().getValueBooleanValueEnumRuleCall_0()); 
	    }
		lv_value_0_0=ruleBooleanValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralBooleanRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BooleanValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleLiteralNumber
entryRuleLiteralNumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralNumberRule()); }
	 iv_ruleLiteralNumber=ruleLiteralNumber 
	 { $current=$iv_ruleLiteralNumber.current; } 
	 EOF 
;

// Rule LiteralNumber
ruleLiteralNumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getLiteralNumberAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralNumberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleVariableAssignment
entryRuleVariableAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableAssignmentRule()); }
	 iv_ruleVariableAssignment=ruleVariableAssignment 
	 { $current=$iv_ruleVariableAssignment.current; } 
	 EOF 
;

// Rule VariableAssignment
ruleVariableAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getVariableAssignmentAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAssignmentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParenthesisExpression
entryRuleParenthesisExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesisExpressionRule()); }
	 iv_ruleParenthesisExpression=ruleParenthesisExpression 
	 { $current=$iv_ruleParenthesisExpression.current; } 
	 EOF 
;

// Rule ParenthesisExpression
ruleParenthesisExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesisExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParenthesisExpressionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesisExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Rule AdditionOperator
ruleAdditionOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAdditionOperatorAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAdditionOperatorAccess().getAddEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getAdditionOperatorAccess().getSubtractEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAdditionOperatorAccess().getSubtractEnumLiteralDeclaration_1()); 
    }
));



// Rule FactorOperator
ruleFactorOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getFactorOperatorAccess().getMultEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFactorOperatorAccess().getMultEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getFactorOperatorAccess().getDivisionEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFactorOperatorAccess().getDivisionEnumLiteralDeclaration_1()); 
    }
));



// Rule ComparisonOperator
ruleComparisonOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='>' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getGtEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparisonOperatorAccess().getGtEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>=' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getGteEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparisonOperatorAccess().getGteEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getLtEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparisonOperatorAccess().getLtEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getLteEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparisonOperatorAccess().getLteEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='==' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getEqEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparisonOperatorAccess().getEqEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getNoteqEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparisonOperatorAccess().getNoteqEnumLiteralDeclaration_5()); 
    }
));



// Rule UnaryLogicalOperator
ruleUnaryLogicalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='not' 
	{
        $current = grammarAccess.getUnaryLogicalOperatorAccess().getNotEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryLogicalOperatorAccess().getNotEnumLiteralDeclaration()); 
    }
);



// Rule BinaryLogicalOperator
ruleBinaryLogicalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='and' 
	{
        $current = grammarAccess.getBinaryLogicalOperatorAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryLogicalOperatorAccess().getAndEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='or' 
	{
        $current = grammarAccess.getBinaryLogicalOperatorAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryLogicalOperatorAccess().getOrEnumLiteralDeclaration_1()); 
    }
));



// Rule TernaryOperator
ruleTernaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='if' 
	{
        $current = grammarAccess.getTernaryOperatorAccess().getIfExpressionEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTernaryOperatorAccess().getIfExpressionEnumLiteralDeclaration()); 
    }
);



// Rule BooleanValue
ruleBooleanValue returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='true' 
	{
        $current = grammarAccess.getBooleanValueAccess().getTrueEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBooleanValueAccess().getTrueEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='false' 
	{
        $current = grammarAccess.getBooleanValueAccess().getFalseEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBooleanValueAccess().getFalseEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



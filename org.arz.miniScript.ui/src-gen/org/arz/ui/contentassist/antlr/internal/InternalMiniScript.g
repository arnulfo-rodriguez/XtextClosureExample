/*
* generated by Xtext
*/
grammar InternalMiniScript;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.arz.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.arz.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.arz.services.MiniScriptGrammarAccess;

}

@parser::members {
 
 	private MiniScriptGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MiniScriptGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getProgramParserRuleCall()); }
	ruleProgram
{ after(grammarAccess.getModelAccess().getProgramParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBody
entryRuleBody 
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule Body
ruleBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBodyAccess().getAlternatives()); }
(rule__Body__Alternatives)
{ after(grammarAccess.getBodyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionParameters
entryRuleFunctionParameters 
:
{ before(grammarAccess.getFunctionParametersRule()); }
	 ruleFunctionParameters
{ after(grammarAccess.getFunctionParametersRule()); } 
	 EOF 
;

// Rule FunctionParameters
ruleFunctionParameters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionParametersAccess().getAlternatives()); }
(rule__FunctionParameters__Alternatives)
{ after(grammarAccess.getFunctionParametersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleApplyFunction
entryRuleApplyFunction 
:
{ before(grammarAccess.getApplyFunctionRule()); }
	 ruleApplyFunction
{ after(grammarAccess.getApplyFunctionRule()); } 
	 EOF 
;

// Rule ApplyFunction
ruleApplyFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getApplyFunctionAccess().getGroup()); }
(rule__ApplyFunction__Group__0)
{ after(grammarAccess.getApplyFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleApplyFunctionAlpha
entryRuleApplyFunctionAlpha 
:
{ before(grammarAccess.getApplyFunctionAlphaRule()); }
	 ruleApplyFunctionAlpha
{ after(grammarAccess.getApplyFunctionAlphaRule()); } 
	 EOF 
;

// Rule ApplyFunctionAlpha
ruleApplyFunctionAlpha
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getApplyFunctionAlphaAccess().getGroup()); }
(rule__ApplyFunctionAlpha__Group__0)
{ after(grammarAccess.getApplyFunctionAlphaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionArguments
entryRuleFunctionArguments 
:
{ before(grammarAccess.getFunctionArgumentsRule()); }
	 ruleFunctionArguments
{ after(grammarAccess.getFunctionArgumentsRule()); } 
	 EOF 
;

// Rule FunctionArguments
ruleFunctionArguments
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getGroup()); }
(rule__FunctionArguments__Group__0)
{ after(grammarAccess.getFunctionArgumentsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpr
entryRuleLiteralExpr 
:
{ before(grammarAccess.getLiteralExprRule()); }
	 ruleLiteralExpr
{ after(grammarAccess.getLiteralExprRule()); } 
	 EOF 
;

// Rule LiteralExpr
ruleLiteralExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExprAccess().getValueAssignment()); }
(rule__LiteralExpr__ValueAssignment)
{ after(grammarAccess.getLiteralExprAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSymbolReference
entryRuleSymbolReference 
:
{ before(grammarAccess.getSymbolReferenceRule()); }
	 ruleSymbolReference
{ after(grammarAccess.getSymbolReferenceRule()); } 
	 EOF 
;

// Rule SymbolReference
ruleSymbolReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSymbolReferenceAccess().getIdAssignment()); }
(rule__SymbolReference__IdAssignment)
{ after(grammarAccess.getSymbolReferenceAccess().getIdAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleNumericExpression
entryRuleNumericExpression 
:
{ before(grammarAccess.getNumericExpressionRule()); }
	 ruleNumericExpression
{ after(grammarAccess.getNumericExpressionRule()); } 
	 EOF 
;

// Rule NumericExpression
ruleNumericExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericExpressionAccess().getGroup()); }
(rule__NumericExpression__Group__0)
{ after(grammarAccess.getNumericExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprTail
entryRuleExprTail 
:
{ before(grammarAccess.getExprTailRule()); }
	 ruleExprTail
{ after(grammarAccess.getExprTailRule()); } 
	 EOF 
;

// Rule ExprTail
ruleExprTail
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprTailAccess().getAlternatives()); }
(rule__ExprTail__Alternatives)
{ after(grammarAccess.getExprTailAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFactor
entryRuleFactor 
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFactorAccess().getGroup()); }
(rule__Factor__Group__0)
{ after(grammarAccess.getFactorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFactorTail
entryRuleFactorTail 
:
{ before(grammarAccess.getFactorTailRule()); }
	 ruleFactorTail
{ after(grammarAccess.getFactorTailRule()); } 
	 EOF 
;

// Rule FactorTail
ruleFactorTail
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFactorTailAccess().getAlternatives()); }
(rule__FactorTail__Alternatives)
{ after(grammarAccess.getFactorTailAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getAlternatives()); }
(rule__Term__Alternatives)
{ after(grammarAccess.getTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesisExpression
entryRuleParenthesisExpression 
:
{ before(grammarAccess.getParenthesisExpressionRule()); }
	 ruleParenthesisExpression
{ after(grammarAccess.getParenthesisExpressionRule()); } 
	 EOF 
;

// Rule ParenthesisExpression
ruleParenthesisExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesisExpressionAccess().getGroup()); }
(rule__ParenthesisExpression__Group__0)
{ after(grammarAccess.getParenthesisExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getFunctionDeclarationParserRuleCall_0()); }
	ruleFunctionDeclaration
{ after(grammarAccess.getExpressionAccess().getFunctionDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getNumericExpressionParserRuleCall_1()); }
	ruleNumericExpression
{ after(grammarAccess.getExpressionAccess().getNumericExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getExpressionsAssignment_0()); }
(rule__Body__ExpressionsAssignment_0)
{ after(grammarAccess.getBodyAccess().getExpressionsAssignment_0()); }
)

    |(
{ before(grammarAccess.getBodyAccess().getGroup_1()); }
(rule__Body__Group_1__0)
{ after(grammarAccess.getBodyAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionParametersAccess().getGroup_0()); }
(rule__FunctionParameters__Group_0__0)
{ after(grammarAccess.getFunctionParametersAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFunctionParametersAccess().getGroup_1()); }
(rule__FunctionParameters__Group_1__0)
{ after(grammarAccess.getFunctionParametersAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprTail__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprTailAccess().getGroup_0()); }
(rule__ExprTail__Group_0__0)
{ after(grammarAccess.getExprTailAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExprTailAccess().getGroup_1()); }
(rule__ExprTail__Group_1__0)
{ after(grammarAccess.getExprTailAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactorTail__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorTailAccess().getGroup_0()); }
(rule__FactorTail__Group_0__0)
{ after(grammarAccess.getFactorTailAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFactorTailAccess().getGroup_1()); }
(rule__FactorTail__Group_1__0)
{ after(grammarAccess.getFactorTailAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getLiteralExprParserRuleCall_0()); }
	ruleLiteralExpr
{ after(grammarAccess.getTermAccess().getLiteralExprParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTermAccess().getApplyFunctionParserRuleCall_1()); }
	ruleApplyFunction
{ after(grammarAccess.getTermAccess().getApplyFunctionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTermAccess().getParenthesisExpressionParserRuleCall_2()); }
	ruleParenthesisExpression
{ after(grammarAccess.getTermAccess().getParenthesisExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getExpressionsAssignment_0()); }
(rule__Program__ExpressionsAssignment_0)
{ after(grammarAccess.getProgramAccess().getExpressionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getGroup_2()); }
(rule__Program__Group_2__0)*
{ after(grammarAccess.getProgramAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Program__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group_2__0__Impl
	rule__Program__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getExpressionAssignment_2_0()); }
(rule__Program__ExpressionAssignment_2_0)
{ after(grammarAccess.getProgramAccess().getExpressionAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_2_1()); }

	';' 

{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFuncKeyword_0()); }

	'func' 

{ after(grammarAccess.getFunctionDeclarationAccess().getFuncKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_2()); }
(rule__FunctionDeclaration__ParametersAssignment_2)
{ after(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_4()); }
(rule__FunctionDeclaration__BodyAssignment_4)
{ after(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Body__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group_1__0__Impl
	rule__Body__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getBodyAction_1_0()); }
(

)
{ after(grammarAccess.getBodyAccess().getBodyAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group_1__1__Impl
	rule__Body__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1_1()); }

	'{' 

{ after(grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group_1__2__Impl
	rule__Body__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getExpressionsAssignment_1_2()); }
(rule__Body__ExpressionsAssignment_1_2)*
{ after(grammarAccess.getBodyAccess().getExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_1_3()); }

	'}' 

{ after(grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionParameters__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionParameters__Group_0__0__Impl
	rule__FunctionParameters__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionParametersAccess().getFunctionParametersAction_0_0()); }
(

)
{ after(grammarAccess.getFunctionParametersAccess().getFunctionParametersAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionParameters__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionParameters__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionParametersAccess().getParametersAssignment_0_1()); }
(rule__FunctionParameters__ParametersAssignment_0_1)?
{ after(grammarAccess.getFunctionParametersAccess().getParametersAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionParameters__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionParameters__Group_1__0__Impl
	rule__FunctionParameters__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionParametersAccess().getParametersAssignment_1_0()); }
(rule__FunctionParameters__ParametersAssignment_1_0)
{ after(grammarAccess.getFunctionParametersAccess().getParametersAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionParameters__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionParameters__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFunctionParametersAccess().getGroup_1_1()); }
(rule__FunctionParameters__Group_1_1__0)
{ after(grammarAccess.getFunctionParametersAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getFunctionParametersAccess().getGroup_1_1()); }
(rule__FunctionParameters__Group_1_1__0)*
{ after(grammarAccess.getFunctionParametersAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionParameters__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionParameters__Group_1_1__0__Impl
	rule__FunctionParameters__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionParametersAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getFunctionParametersAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionParameters__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionParameters__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionParametersAccess().getParametersAssignment_1_1_1()); }
(rule__FunctionParameters__ParametersAssignment_1_1_1)
{ after(grammarAccess.getFunctionParametersAccess().getParametersAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ApplyFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplyFunction__Group__0__Impl
	rule__ApplyFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplyFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyFunctionAccess().getFunctorAssignment_0()); }
(rule__ApplyFunction__FunctorAssignment_0)
{ after(grammarAccess.getApplyFunctionAccess().getFunctorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ApplyFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplyFunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplyFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyFunctionAccess().getApp3Assignment_1()); }
(rule__ApplyFunction__App3Assignment_1)
{ after(grammarAccess.getApplyFunctionAccess().getApp3Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ApplyFunctionAlpha__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplyFunctionAlpha__Group__0__Impl
	rule__ApplyFunctionAlpha__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplyFunctionAlpha__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyFunctionAlphaAccess().getApplyFunctionAlphaAction_0()); }
(

)
{ after(grammarAccess.getApplyFunctionAlphaAccess().getApplyFunctionAlphaAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ApplyFunctionAlpha__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplyFunctionAlpha__Group__1__Impl
	rule__ApplyFunctionAlpha__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplyFunctionAlpha__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyFunctionAlphaAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getApplyFunctionAlphaAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ApplyFunctionAlpha__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplyFunctionAlpha__Group__2__Impl
	rule__ApplyFunctionAlpha__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplyFunctionAlpha__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyFunctionAlphaAccess().getArgsAssignment_2()); }
(rule__ApplyFunctionAlpha__ArgsAssignment_2)?
{ after(grammarAccess.getApplyFunctionAlphaAccess().getArgsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ApplyFunctionAlpha__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplyFunctionAlpha__Group__3__Impl
	rule__ApplyFunctionAlpha__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplyFunctionAlpha__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyFunctionAlphaAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getApplyFunctionAlphaAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ApplyFunctionAlpha__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ApplyFunctionAlpha__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ApplyFunctionAlpha__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyFunctionAlphaAccess().getNextCallAssignment_4()); }
(rule__ApplyFunctionAlpha__NextCallAssignment_4)?
{ after(grammarAccess.getApplyFunctionAlphaAccess().getNextCallAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionArguments__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArguments__Group__0__Impl
	rule__FunctionArguments__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArguments__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getArgumentsAssignment_0()); }
(rule__FunctionArguments__ArgumentsAssignment_0)
{ after(grammarAccess.getFunctionArgumentsAccess().getArgumentsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArguments__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArguments__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArguments__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getGroup_1()); }
(rule__FunctionArguments__Group_1__0)*
{ after(grammarAccess.getFunctionArgumentsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArguments__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArguments__Group_1__0__Impl
	rule__FunctionArguments__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArguments__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getFunctionArgumentsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArguments__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArguments__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArguments__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getArgumentsAssignment_1_1()); }
(rule__FunctionArguments__ArgumentsAssignment_1_1)
{ after(grammarAccess.getFunctionArgumentsAccess().getArgumentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__NumericExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericExpression__Group__0__Impl
	rule__NumericExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericExpressionAccess().getFactorAssignment_0()); }
(rule__NumericExpression__FactorAssignment_0)
{ after(grammarAccess.getNumericExpressionAccess().getFactorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericExpressionAccess().getExprTailAssignment_1()); }
(rule__NumericExpression__ExprTailAssignment_1)?
{ after(grammarAccess.getNumericExpressionAccess().getExprTailAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprTail__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprTail__Group_0__0__Impl
	rule__ExprTail__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprTail__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprTailAccess().getPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getExprTailAccess().getPlusSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprTail__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprTail__Group_0__1__Impl
	rule__ExprTail__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprTail__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprTailAccess().getFactorAssignment_0_1()); }
(rule__ExprTail__FactorAssignment_0_1)
{ after(grammarAccess.getExprTailAccess().getFactorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprTail__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprTail__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprTail__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprTailAccess().getExprTailAssignment_0_2()); }
(rule__ExprTail__ExprTailAssignment_0_2)?
{ after(grammarAccess.getExprTailAccess().getExprTailAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExprTail__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprTail__Group_1__0__Impl
	rule__ExprTail__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprTail__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprTailAccess().getHyphenMinusKeyword_1_0()); }

	'-' 

{ after(grammarAccess.getExprTailAccess().getHyphenMinusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprTail__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprTail__Group_1__1__Impl
	rule__ExprTail__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprTail__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprTailAccess().getFactorAssignment_1_1()); }
(rule__ExprTail__FactorAssignment_1_1)
{ after(grammarAccess.getExprTailAccess().getFactorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprTail__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprTail__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprTail__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprTailAccess().getExprTailAssignment_1_2()); }
(rule__ExprTail__ExprTailAssignment_1_2)?
{ after(grammarAccess.getExprTailAccess().getExprTailAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Factor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group__0__Impl
	rule__Factor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getTermAssignment_0()); }
(rule__Factor__TermAssignment_0)
{ after(grammarAccess.getFactorAccess().getTermAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getFactorTailAssignment_1()); }
(rule__Factor__FactorTailAssignment_1)?
{ after(grammarAccess.getFactorAccess().getFactorTailAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FactorTail__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactorTail__Group_0__0__Impl
	rule__FactorTail__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FactorTail__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorTailAccess().getAsteriskKeyword_0_0()); }

	'*' 

{ after(grammarAccess.getFactorTailAccess().getAsteriskKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactorTail__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactorTail__Group_0__1__Impl
	rule__FactorTail__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FactorTail__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorTailAccess().getTermAssignment_0_1()); }
(rule__FactorTail__TermAssignment_0_1)
{ after(grammarAccess.getFactorTailAccess().getTermAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactorTail__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactorTail__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FactorTail__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorTailAccess().getFactorTailAssignment_0_2()); }
(rule__FactorTail__FactorTailAssignment_0_2)?
{ after(grammarAccess.getFactorTailAccess().getFactorTailAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FactorTail__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactorTail__Group_1__0__Impl
	rule__FactorTail__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FactorTail__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorTailAccess().getSolidusKeyword_1_0()); }

	'/' 

{ after(grammarAccess.getFactorTailAccess().getSolidusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactorTail__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactorTail__Group_1__1__Impl
	rule__FactorTail__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FactorTail__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorTailAccess().getTermAssignment_1_1()); }
(rule__FactorTail__TermAssignment_1_1)
{ after(grammarAccess.getFactorTailAccess().getTermAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FactorTail__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FactorTail__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FactorTail__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorTailAccess().getFactorTailAssignment_1_2()); }
(rule__FactorTail__FactorTailAssignment_1_2)?
{ after(grammarAccess.getFactorTailAccess().getFactorTailAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParenthesisExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisExpression__Group__0__Impl
	rule__ParenthesisExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesisExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesisExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisExpression__Group__1__Impl
	rule__ParenthesisExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisExpressionAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getParenthesisExpressionAccess().getExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesisExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesisExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Program__ExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getExpressionsExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getProgramAccess().getExpressionsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ExpressionAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getExpressionExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getProgramAccess().getExpressionExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParametersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersFunctionParametersParserRuleCall_2_0()); }
	ruleFunctionParameters{ after(grammarAccess.getFunctionDeclarationAccess().getParametersFunctionParametersParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyBodyParserRuleCall_4_0()); }
	ruleBody{ after(grammarAccess.getFunctionDeclarationAccess().getBodyBodyParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__ExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getExpressionsExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getBodyAccess().getExpressionsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__ExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getExpressionsExpressionParserRuleCall_1_2_0()); }
	ruleExpression{ after(grammarAccess.getBodyAccess().getExpressionsExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__ParametersAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionParametersAccess().getParametersIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionParametersAccess().getParametersIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__ParametersAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionParametersAccess().getParametersIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctionParametersAccess().getParametersIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameters__ParametersAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionParametersAccess().getParametersIDTerminalRuleCall_1_1_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionParametersAccess().getParametersIDTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ApplyFunction__FunctorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyFunctionAccess().getFunctorSymbolReferenceParserRuleCall_0_0()); }
	ruleSymbolReference{ after(grammarAccess.getApplyFunctionAccess().getFunctorSymbolReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ApplyFunction__App3Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyFunctionAccess().getApp3ApplyFunctionAlphaParserRuleCall_1_0()); }
	ruleApplyFunctionAlpha{ after(grammarAccess.getApplyFunctionAccess().getApp3ApplyFunctionAlphaParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ApplyFunctionAlpha__ArgsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyFunctionAlphaAccess().getArgsFunctionArgumentsParserRuleCall_2_0()); }
	ruleFunctionArguments{ after(grammarAccess.getApplyFunctionAlphaAccess().getArgsFunctionArgumentsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ApplyFunctionAlpha__NextCallAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyFunctionAlphaAccess().getNextCallApplyFunctionAlphaParserRuleCall_4_0()); }
	ruleApplyFunctionAlpha{ after(grammarAccess.getApplyFunctionAlphaAccess().getNextCallApplyFunctionAlphaParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArguments__ArgumentsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getArgumentsExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getFunctionArgumentsAccess().getArgumentsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArguments__ArgumentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getArgumentsExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionArgumentsAccess().getArgumentsExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpr__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExprAccess().getValueNumTerminalRuleCall_0()); }
	RULE_NUM{ after(grammarAccess.getLiteralExprAccess().getValueNumTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__IdAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymbolReferenceAccess().getIdIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getSymbolReferenceAccess().getIdIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__NumericExpression__FactorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericExpressionAccess().getFactorFactorParserRuleCall_0_0()); }
	ruleFactor{ after(grammarAccess.getNumericExpressionAccess().getFactorFactorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__ExprTailAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericExpressionAccess().getExprTailExprTailParserRuleCall_1_0()); }
	ruleExprTail{ after(grammarAccess.getNumericExpressionAccess().getExprTailExprTailParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprTail__FactorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprTailAccess().getFactorFactorParserRuleCall_0_1_0()); }
	ruleFactor{ after(grammarAccess.getExprTailAccess().getFactorFactorParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprTail__ExprTailAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprTailAccess().getExprTailExprTailParserRuleCall_0_2_0()); }
	ruleExprTail{ after(grammarAccess.getExprTailAccess().getExprTailExprTailParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprTail__FactorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprTailAccess().getFactorFactorParserRuleCall_1_1_0()); }
	ruleFactor{ after(grammarAccess.getExprTailAccess().getFactorFactorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprTail__ExprTailAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprTailAccess().getExprTailExprTailParserRuleCall_1_2_0()); }
	ruleExprTail{ after(grammarAccess.getExprTailAccess().getExprTailExprTailParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__TermAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getTermTermParserRuleCall_0_0()); }
	ruleTerm{ after(grammarAccess.getFactorAccess().getTermTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__FactorTailAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getFactorTailFactorTailParserRuleCall_1_0()); }
	ruleFactorTail{ after(grammarAccess.getFactorAccess().getFactorTailFactorTailParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactorTail__TermAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorTailAccess().getTermTermParserRuleCall_0_1_0()); }
	ruleTerm{ after(grammarAccess.getFactorTailAccess().getTermTermParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactorTail__FactorTailAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorTailAccess().getFactorTailFactorTailParserRuleCall_0_2_0()); }
	ruleFactorTail{ after(grammarAccess.getFactorTailAccess().getFactorTailFactorTailParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactorTail__TermAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorTailAccess().getTermTermParserRuleCall_1_1_0()); }
	ruleTerm{ after(grammarAccess.getFactorTailAccess().getTermTermParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FactorTail__FactorTailAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorTailAccess().getFactorTailFactorTailParserRuleCall_1_2_0()); }
	ruleFactorTail{ after(grammarAccess.getFactorTailAccess().getFactorTailFactorTailParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NUM : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


